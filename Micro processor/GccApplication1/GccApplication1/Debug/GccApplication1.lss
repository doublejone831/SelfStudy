
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000eb8  00000f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012e  0080012e  00000f7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001602  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7d  00000000  00000000  000026e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c33  00000000  00000000  0000315f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00003d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089b  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001050  00000000  00000000  0000495b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000059ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5d c2       	rjmp	.+1210   	; 0x4bc <__ctors_end>
   2:	00 00       	nop
   4:	78 c2       	rjmp	.+1264   	; 0x4f6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c2       	rjmp	.+1260   	; 0x4f6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c2       	rjmp	.+1256   	; 0x4f6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c2       	rjmp	.+1252   	; 0x4f6 <__bad_interrupt>
  12:	00 00       	nop
  14:	70 c2       	rjmp	.+1248   	; 0x4f6 <__bad_interrupt>
  16:	00 00       	nop
  18:	6e c2       	rjmp	.+1244   	; 0x4f6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6c c2       	rjmp	.+1240   	; 0x4f6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c2       	rjmp	.+1236   	; 0x4f6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c2       	rjmp	.+1232   	; 0x4f6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c2       	rjmp	.+1228   	; 0x4f6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c2       	rjmp	.+1224   	; 0x4f6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c2       	rjmp	.+1220   	; 0x4f6 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c2       	rjmp	.+1216   	; 0x4f6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5e c2       	rjmp	.+1212   	; 0x4f6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5c c2       	rjmp	.+1208   	; 0x4f6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5a c2       	rjmp	.+1204   	; 0x4f6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c2       	rjmp	.+1200   	; 0x4f6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c2       	rjmp	.+1196   	; 0x4f6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c2       	rjmp	.+1192   	; 0x4f6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c2       	rjmp	.+1188   	; 0x4f6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c2       	rjmp	.+1184   	; 0x4f6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c2       	rjmp	.+1180   	; 0x4f6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c2       	rjmp	.+1176   	; 0x4f6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c2       	rjmp	.+1172   	; 0x4f6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c2       	rjmp	.+1168   	; 0x4f6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c2       	rjmp	.+1164   	; 0x4f6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c2       	rjmp	.+1160   	; 0x4f6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c2       	rjmp	.+1156   	; 0x4f6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c2       	rjmp	.+1152   	; 0x4f6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c2       	rjmp	.+1148   	; 0x4f6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c2       	rjmp	.+1144   	; 0x4f6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c2       	rjmp	.+1140   	; 0x4f6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c2       	rjmp	.+1136   	; 0x4f6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c2       	rjmp	.+1132   	; 0x4f6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7f 05       	cpc	r23, r15
  8e:	83 05       	cpc	r24, r3
  90:	83 05       	cpc	r24, r3
  92:	83 05       	cpc	r24, r3
  94:	83 05       	cpc	r24, r3
  96:	83 05       	cpc	r24, r3
  98:	83 05       	cpc	r24, r3
  9a:	83 05       	cpc	r24, r3
  9c:	83 05       	cpc	r24, r3
  9e:	83 05       	cpc	r24, r3
  a0:	83 05       	cpc	r24, r3
  a2:	83 05       	cpc	r24, r3
  a4:	83 05       	cpc	r24, r3
  a6:	83 05       	cpc	r24, r3
  a8:	83 05       	cpc	r24, r3
  aa:	83 05       	cpc	r24, r3
  ac:	83 05       	cpc	r24, r3
  ae:	83 05       	cpc	r24, r3
  b0:	83 05       	cpc	r24, r3
  b2:	83 05       	cpc	r24, r3
  b4:	83 05       	cpc	r24, r3
  b6:	83 05       	cpc	r24, r3
  b8:	83 05       	cpc	r24, r3
  ba:	83 05       	cpc	r24, r3
  bc:	83 05       	cpc	r24, r3
  be:	83 05       	cpc	r24, r3
  c0:	83 05       	cpc	r24, r3
  c2:	83 05       	cpc	r24, r3
  c4:	83 05       	cpc	r24, r3
  c6:	59 05       	cpc	r21, r9
  c8:	db 04       	cpc	r13, r11
  ca:	fa 04       	cpc	r15, r10
  cc:	83 05       	cpc	r24, r3
  ce:	69 05       	cpc	r22, r9
  d0:	83 05       	cpc	r24, r3
  d2:	83 05       	cpc	r24, r3
  d4:	83 05       	cpc	r24, r3
  d6:	83 05       	cpc	r24, r3
  d8:	83 05       	cpc	r24, r3
  da:	83 05       	cpc	r24, r3
  dc:	83 05       	cpc	r24, r3
  de:	83 05       	cpc	r24, r3
  e0:	83 05       	cpc	r24, r3
  e2:	83 05       	cpc	r24, r3
  e4:	83 05       	cpc	r24, r3
  e6:	83 05       	cpc	r24, r3
  e8:	75 05       	cpc	r23, r5
  ea:	83 05       	cpc	r24, r3
  ec:	22 05       	cpc	r18, r2
  ee:	83 05       	cpc	r24, r3
  f0:	83 05       	cpc	r24, r3
  f2:	3c 05       	cpc	r19, r12
  f4:	83 05       	cpc	r24, r3
  f6:	83 05       	cpc	r24, r3
  f8:	83 05       	cpc	r24, r3
  fa:	83 05       	cpc	r24, r3
  fc:	83 05       	cpc	r24, r3
  fe:	83 05       	cpc	r24, r3
 100:	83 05       	cpc	r24, r3
 102:	83 05       	cpc	r24, r3
 104:	83 05       	cpc	r24, r3
 106:	49 05       	cpc	r20, r9
 108:	db 04       	cpc	r13, r11
 10a:	e4 04       	cpc	r14, r4
 10c:	83 05       	cpc	r24, r3
 10e:	69 05       	cpc	r22, r9
 110:	83 05       	cpc	r24, r3
 112:	83 05       	cpc	r24, r3
 114:	83 05       	cpc	r24, r3
 116:	83 05       	cpc	r24, r3
 118:	83 05       	cpc	r24, r3
 11a:	83 05       	cpc	r24, r3
 11c:	83 05       	cpc	r24, r3
 11e:	83 05       	cpc	r24, r3
 120:	83 05       	cpc	r24, r3
 122:	83 05       	cpc	r24, r3
 124:	83 05       	cpc	r24, r3
 126:	83 05       	cpc	r24, r3
 128:	75 05       	cpc	r23, r5
 12a:	83 05       	cpc	r24, r3
 12c:	15 05       	cpc	r17, r5
 12e:	83 05       	cpc	r24, r3
 130:	83 05       	cpc	r24, r3
 132:	2f 05       	cpc	r18, r15

00000134 <ARR_GlcdFont_U8>:
 134:	ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
 144:	ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff     ................
 154:	ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00     ................
 164:	ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff     ................
 174:	ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff     ................
 184:	ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff     ................
 194:	00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff     ................
 1a4:	ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
 1b4:	ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff     ................
 1c4:	ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00     ................
 1d4:	ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff     ................
 1e4:	ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff     ................
 1f4:	ff ff 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff     ................
 204:	00 ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff     ................
 214:	00 00 00 00 00 ff ff 00 00 4f 00 00 00 ff 00 07     .........O......
 224:	00 07 00 00 ff 14 7f 14 7f 14 00 ff 24 2a 7f 2a     ............$*.*
 234:	12 00 ff 23 13 08 64 62 00 ff 36 49 55 22 20 00     ...#..db..6IU" .
 244:	ff 00 05 03 00 00 00 ff 00 1c 22 41 00 00 ff 00     .........."A....
 254:	41 22 1c 00 00 ff 14 08 3e 08 14 00 ff 08 08 3e     A"......>......>
 264:	08 08 00 ff 50 30 00 00 00 00 ff 08 08 08 08 08     ....P0..........
 274:	00 ff 00 60 60 00 00 00 ff 20 10 08 04 02 00 ff     ...``.... ......
 284:	3e 51 49 45 3e 00 ff 40 42 7f 40 40 00 ff 42 61     >QIE>..@B.@@..Ba
 294:	51 49 46 00 ff 21 41 45 4b 31 00 ff 18 14 12 7f     QIF..!AEK1......
 2a4:	10 00 ff 27 45 45 45 39 00 ff 3c 4a 49 49 30 00     ...'EEE9..<JII0.
 2b4:	ff 01 71 09 05 03 00 ff 36 49 49 49 36 00 ff 06     ..q.....6III6...
 2c4:	49 49 29 1e 00 ff 00 36 36 00 00 00 ff 00 56 36     II)....66.....V6
 2d4:	00 00 00 ff 08 14 22 41 00 00 ff 14 14 14 14 14     ......"A........
 2e4:	00 ff 00 41 22 14 08 00 ff 02 01 51 09 06 00 ff     ...A"......Q....
 2f4:	3e 41 5d 55 1e 00 ff 7e 11 11 11 7e 00 ff 7f 49     >A]U...~...~...I
 304:	49 49 36 00 ff 3e 41 41 41 22 00 ff 7f 41 41 22     II6..>AAA"...AA"
 314:	1c 00 ff 7f 49 49 49 41 00 ff 7f 09 09 09 01 00     ....IIIA........
 324:	ff 3e 41 49 49 7a 00 ff 7f 08 08 08 7f 00 ff 00     .>AIIz..........
 334:	41 7f 41 00 00 ff 20 40 41 3f 01 00 ff 7f 08 14     A.A... @A?......
 344:	22 41 00 ff 7f 40 40 40 40 00 ff 7f 02 0c 02 7f     "A...@@@@.......
 354:	00 ff 7f 04 08 10 7f 00 ff 3e 41 41 41 3e 00 ff     .........>AAA>..
 364:	7f 09 09 09 06 00 ff 3e 41 51 21 5e 00 ff 7f 09     .......>AQ!^....
 374:	19 29 46 00 ff 26 49 49 49 32 00 ff 01 01 7f 01     .)F..&III2......
 384:	01 00 ff 3f 40 40 40 3f 00 ff 1f 20 40 20 1f 00     ...?@@@?... @ ..
 394:	ff 3f 40 38 40 3f 00 ff 63 14 08 14 63 00 ff 07     .?@8@?..c...c...
 3a4:	08 70 08 07 00 ff 61 51 49 45 43 00 ff 00 7f 41     .p....aQIEC....A
 3b4:	41 00 00 ff 02 04 08 10 20 00 ff 00 41 41 7f 00     A....... ...AA..
 3c4:	00 ff 04 02 01 02 04 00 ff 40 40 40 40 40 00 ff     .........@@@@@..
 3d4:	00 00 03 05 00 00 ff 20 54 54 54 78 00 ff 7f 44     ....... TTTx...D
 3e4:	44 44 38 00 ff 38 44 44 44 44 00 ff 38 44 44 44     DD8..8DDDD..8DDD
 3f4:	7f 00 ff 38 54 54 54 18 00 ff 04 04 7e 05 05 00     ...8TTT.....~...
 404:	ff 08 54 54 54 3c 00 ff 7f 08 04 04 78 00 ff 00     ..TTT<......x...
 414:	44 7d 40 00 ff ff 20 40 44 3d 00 ff ff 7f 10 28     D}@... @D=.....(
 424:	44 00 ff ff 41 7f 40 00 ff ff ff 7c 04 7c 04 78     D...A.@....|.|.x
 434:	00 ff 7c 08 04 04 78 00 ff 38 44 44 44 38 00 ff     ..|...x..8DDD8..
 444:	7c 14 14 14 08 00 ff 08 14 14 14 7c 00 ff 7c 08     |..........|..|.
 454:	04 04 00 ff ff 48 54 54 54 24 00 ff 04 04 3f 44     .....HTTT$....?D
 464:	44 00 ff 3c 40 40 20 7c 00 ff 1c 20 40 20 1c 00     D..<@@ |... @ ..
 474:	ff 3c 40 30 40 3c 00 ff 44 28 10 28 44 00 ff 0c     .<@0@<..D(.(D...
 484:	50 50 50 3c 00 ff 44 64 54 4c 44 00 ff 08 36 41     PPP<..DdTLD...6A
 494:	41 00 00 ff 00 00 77 00 00 00 ff 00 41 41 36 08     A.....w.....AA6.
 4a4:	00 ff 08 08 2a 1c 08 00 ff 08 1c 2a 08 08 00 ff     ....*......*....
 4b4:	ff ff ff ff ff 00 ff 00                             ........

000004bc <__ctors_end>:
 4bc:	11 24       	eor	r1, r1
 4be:	1f be       	out	0x3f, r1	; 63
 4c0:	cf ef       	ldi	r28, 0xFF	; 255
 4c2:	d0 e1       	ldi	r29, 0x10	; 16
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	cd bf       	out	0x3d, r28	; 61

000004c8 <__do_copy_data>:
 4c8:	11 e0       	ldi	r17, 0x01	; 1
 4ca:	a0 e0       	ldi	r26, 0x00	; 0
 4cc:	b1 e0       	ldi	r27, 0x01	; 1
 4ce:	e8 eb       	ldi	r30, 0xB8	; 184
 4d0:	fe e0       	ldi	r31, 0x0E	; 14
 4d2:	00 e0       	ldi	r16, 0x00	; 0
 4d4:	0b bf       	out	0x3b, r16	; 59
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__do_copy_data+0x14>
 4d8:	07 90       	elpm	r0, Z+
 4da:	0d 92       	st	X+, r0
 4dc:	ae 32       	cpi	r26, 0x2E	; 46
 4de:	b1 07       	cpc	r27, r17
 4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__do_copy_data+0x10>

000004e2 <__do_clear_bss>:
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	ae e2       	ldi	r26, 0x2E	; 46
 4e6:	b1 e0       	ldi	r27, 0x01	; 1
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <.do_clear_bss_start>

000004ea <.do_clear_bss_loop>:
 4ea:	1d 92       	st	X+, r1

000004ec <.do_clear_bss_start>:
 4ec:	a2 33       	cpi	r26, 0x32	; 50
 4ee:	b2 07       	cpc	r27, r18
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <.do_clear_bss_loop>
 4f2:	1c d3       	rcall	.+1592   	; 0xb2c <main>
 4f4:	df c4       	rjmp	.+2494   	; 0xeb4 <_exit>

000004f6 <__bad_interrupt>:
 4f6:	84 cd       	rjmp	.-1272   	; 0x0 <__vectors>

000004f8 <glcd_SelectPage0>:



void GLCD_DisableDisplayInversion()
{
	GLCD.Invertdisplay = 0x00;
 4f8:	85 b3       	in	r24, 0x15	; 21
 4fa:	81 60       	ori	r24, 0x01	; 1
 4fc:	85 bb       	out	0x15, r24	; 21
 4fe:	85 b3       	in	r24, 0x15	; 21
 500:	8d 7f       	andi	r24, 0xFD	; 253
 502:	85 bb       	out	0x15, r24	; 21
 504:	08 95       	ret

00000506 <glcd_SelectPage1>:
 506:	85 b3       	in	r24, 0x15	; 21
 508:	82 60       	ori	r24, 0x02	; 2
 50a:	85 bb       	out	0x15, r24	; 21
 50c:	85 b3       	in	r24, 0x15	; 21
 50e:	8e 7f       	andi	r24, 0xFE	; 254
 510:	85 bb       	out	0x15, r24	; 21
 512:	08 95       	ret

00000514 <glcd_BusyCheck>:
 514:	8a b3       	in	r24, 0x1a	; 26
 516:	8f 77       	andi	r24, 0x7F	; 127
 518:	8a bb       	out	0x1a, r24	; 26
 51a:	85 b3       	in	r24, 0x15	; 21
 51c:	87 7f       	andi	r24, 0xF7	; 247
 51e:	85 bb       	out	0x15, r24	; 21
 520:	85 b3       	in	r24, 0x15	; 21
 522:	84 60       	ori	r24, 0x04	; 4
 524:	85 bb       	out	0x15, r24	; 21
 526:	85 b3       	in	r24, 0x15	; 21
 528:	8f 7e       	andi	r24, 0xEF	; 239
 52a:	85 bb       	out	0x15, r24	; 21
 52c:	00 c0       	rjmp	.+0      	; 0x52e <glcd_BusyCheck+0x1a>
 52e:	85 b3       	in	r24, 0x15	; 21
 530:	80 61       	ori	r24, 0x10	; 16
 532:	85 bb       	out	0x15, r24	; 21
 534:	00 c0       	rjmp	.+0      	; 0x536 <glcd_BusyCheck+0x22>
 536:	cf 99       	sbic	0x19, 7	; 25
 538:	f6 cf       	rjmp	.-20     	; 0x526 <glcd_BusyCheck+0x12>
 53a:	8a b3       	in	r24, 0x1a	; 26
 53c:	80 68       	ori	r24, 0x80	; 128
 53e:	8a bb       	out	0x1a, r24	; 26
 540:	08 95       	ret

00000542 <glcd_CmdWrite>:
 542:	cf 93       	push	r28
 544:	c8 2f       	mov	r28, r24
 546:	e6 df       	rcall	.-52     	; 0x514 <glcd_BusyCheck>
 548:	cb bb       	out	0x1b, r28	; 27
 54a:	85 b3       	in	r24, 0x15	; 21
 54c:	87 7f       	andi	r24, 0xF7	; 247
 54e:	85 bb       	out	0x15, r24	; 21
 550:	85 b3       	in	r24, 0x15	; 21
 552:	8b 7f       	andi	r24, 0xFB	; 251
 554:	85 bb       	out	0x15, r24	; 21
 556:	85 b3       	in	r24, 0x15	; 21
 558:	80 61       	ori	r24, 0x10	; 16
 55a:	85 bb       	out	0x15, r24	; 21
 55c:	00 c0       	rjmp	.+0      	; 0x55e <glcd_CmdWrite+0x1c>
 55e:	85 b3       	in	r24, 0x15	; 21
 560:	8f 7e       	andi	r24, 0xEF	; 239
 562:	85 bb       	out	0x15, r24	; 21
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <glcd_DataWrite>:
 568:	cf 93       	push	r28
 56a:	c8 2f       	mov	r28, r24
 56c:	d3 df       	rcall	.-90     	; 0x514 <glcd_BusyCheck>
 56e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__data_end+0x3>
 572:	c8 27       	eor	r28, r24
 574:	cb bb       	out	0x1b, r28	; 27
 576:	85 b3       	in	r24, 0x15	; 21
 578:	88 60       	ori	r24, 0x08	; 8
 57a:	85 bb       	out	0x15, r24	; 21
 57c:	85 b3       	in	r24, 0x15	; 21
 57e:	8b 7f       	andi	r24, 0xFB	; 251
 580:	85 bb       	out	0x15, r24	; 21
 582:	85 b3       	in	r24, 0x15	; 21
 584:	80 61       	ori	r24, 0x10	; 16
 586:	85 bb       	out	0x15, r24	; 21
 588:	00 c0       	rjmp	.+0      	; 0x58a <glcd_DataWrite+0x22>
 58a:	85 b3       	in	r24, 0x15	; 21
 58c:	8f 7e       	andi	r24, 0xEF	; 239
 58e:	85 bb       	out	0x15, r24	; 21
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <GLCD_GoToPage>:
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	82 30       	cpi	r24, 0x02	; 2
 59c:	78 f4       	brcc	.+30     	; 0x5bc <GLCD_GoToPage+0x28>
 59e:	18 2f       	mov	r17, r24
 5a0:	81 11       	cpse	r24, r1
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <GLCD_GoToPage+0x14>
 5a4:	a9 df       	rcall	.-174    	; 0x4f8 <glcd_SelectPage0>
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <GLCD_GoToPage+0x16>
 5a8:	ae df       	rcall	.-164    	; 0x506 <glcd_SelectPage1>
 5aa:	ce e2       	ldi	r28, 0x2E	; 46
 5ac:	d1 e0       	ldi	r29, 0x01	; 1
 5ae:	18 83       	st	Y, r17
 5b0:	80 e4       	ldi	r24, 0x40	; 64
 5b2:	8a 83       	std	Y+2, r24	; 0x02
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	c5 df       	rcall	.-118    	; 0x542 <glcd_CmdWrite>
 5b8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ba:	c3 df       	rcall	.-122    	; 0x542 <glcd_CmdWrite>
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	08 95       	ret

000005c4 <GLCD_GoToLine>:
 5c4:	88 30       	cpi	r24, 0x08	; 8
 5c6:	28 f4       	brcc	.+10     	; 0x5d2 <GLCD_GoToLine+0xe>
 5c8:	88 54       	subi	r24, 0x48	; 72
 5ca:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__data_end+0x1>
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	e1 cf       	rjmp	.-62     	; 0x594 <GLCD_GoToPage>
 5d2:	08 95       	ret

000005d4 <GLCD_Clear>:
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	ee e2       	ldi	r30, 0x2E	; 46
 5dc:	f1 e0       	ldi	r31, 0x01	; 1
 5de:	13 81       	ldd	r17, Z+3	; 0x03
 5e0:	13 82       	std	Z+3, r1	; 0x03
 5e2:	d0 e0       	ldi	r29, 0x00	; 0
 5e4:	0e c0       	rjmp	.+28     	; 0x602 <GLCD_Clear+0x2e>
 5e6:	8d 2f       	mov	r24, r29
 5e8:	ed df       	rcall	.-38     	; 0x5c4 <GLCD_GoToLine>
 5ea:	c0 e0       	ldi	r28, 0x00	; 0
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <GLCD_Clear+0x28>
 5ee:	c0 34       	cpi	r28, 0x40	; 64
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <GLCD_Clear+0x22>
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	cf df       	rcall	.-98     	; 0x594 <GLCD_GoToPage>
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	b7 df       	rcall	.-146    	; 0x568 <glcd_DataWrite>
 5fa:	cf 5f       	subi	r28, 0xFF	; 255
 5fc:	cc 23       	and	r28, r28
 5fe:	bc f7       	brge	.-18     	; 0x5ee <GLCD_Clear+0x1a>
 600:	df 5f       	subi	r29, 0xFF	; 255
 602:	d8 30       	cpi	r29, 0x08	; 8
 604:	80 f3       	brcs	.-32     	; 0x5e6 <GLCD_Clear+0x12>
 606:	10 93 31 01 	sts	0x0131, r17	; 0x800131 <__data_end+0x3>
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	db df       	rcall	.-74     	; 0x5c4 <GLCD_GoToLine>
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	08 95       	ret

00000616 <GLCD_Init>:
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	84 bb       	out	0x14, r24	; 20
 61a:	8a bb       	out	0x1a, r24	; 26
 61c:	6d df       	rcall	.-294    	; 0x4f8 <glcd_SelectPage0>
 61e:	8f e3       	ldi	r24, 0x3F	; 63
 620:	90 df       	rcall	.-224    	; 0x542 <glcd_CmdWrite>
 622:	71 df       	rcall	.-286    	; 0x506 <glcd_SelectPage1>
 624:	8f e3       	ldi	r24, 0x3F	; 63
 626:	8d df       	rcall	.-230    	; 0x542 <glcd_CmdWrite>
 628:	83 ec       	ldi	r24, 0xC3	; 195
 62a:	99 e0       	ldi	r25, 0x09	; 9
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <GLCD_Init+0x16>
 630:	00 c0       	rjmp	.+0      	; 0x632 <GLCD_Init+0x1c>
 632:	00 00       	nop
 634:	61 df       	rcall	.-318    	; 0x4f8 <glcd_SelectPage0>
 636:	80 ec       	ldi	r24, 0xC0	; 192
 638:	84 df       	rcall	.-248    	; 0x542 <glcd_CmdWrite>
 63a:	65 df       	rcall	.-310    	; 0x506 <glcd_SelectPage1>
 63c:	80 ec       	ldi	r24, 0xC0	; 192
 63e:	81 df       	rcall	.-254    	; 0x542 <glcd_CmdWrite>
 640:	c9 cf       	rjmp	.-110    	; 0x5d4 <GLCD_Clear>
 642:	08 95       	ret

00000644 <GLCD_GoToNextLine>:
 644:	ee e2       	ldi	r30, 0x2E	; 46
 646:	f1 e0       	ldi	r31, 0x01	; 1
 648:	81 81       	ldd	r24, Z+1	; 0x01
 64a:	8f 5f       	subi	r24, 0xFF	; 255
 64c:	81 83       	std	Z+1, r24	; 0x01
 64e:	80 3c       	cpi	r24, 0xC0	; 192
 650:	18 f0       	brcs	.+6      	; 0x658 <GLCD_GoToNextLine+0x14>
 652:	88 eb       	ldi	r24, 0xB8	; 184
 654:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__data_end+0x1>
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	9c cf       	rjmp	.-200    	; 0x594 <GLCD_GoToPage>
 65c:	08 95       	ret

0000065e <GLCD_DisplayChar>:
 * description  : This function sends a character to be displayed on LCD.
                  Any valid ascii value can be passed to display respective character
 ***************************************************************************************************/
 /* Add the comments for decoding the character, Even offset handling*/
void GLCD_DisplayChar(uint8_t var_lcdData_u8)
{
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	c8 2f       	mov	r28, r24
    uint8_t dat,*ptr;


    if(((GLCD.PageNum == 0x01) && (GLCD.CursorPos>=0x7c)) || (var_lcdData_u8=='\n'))
 668:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	21 f4       	brne	.+8      	; 0x678 <GLCD_DisplayChar+0x1a>
 670:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end+0x2>
 674:	8c 37       	cpi	r24, 0x7C	; 124
 676:	10 f4       	brcc	.+4      	; 0x67c <GLCD_DisplayChar+0x1e>
 678:	ca 30       	cpi	r28, 0x0A	; 10
 67a:	09 f4       	brne	.+2      	; 0x67e <GLCD_DisplayChar+0x20>
    {
        /* If the cursor has reached to end of line on page1
        OR NewLine command is issued Then Move the cursor to next line */
        GLCD_GoToNextLine();
 67c:	e3 df       	rcall	.-58     	; 0x644 <GLCD_GoToNextLine>
    }
       if(var_lcdData_u8!='\n') /* TODO */
 67e:	ca 30       	cpi	r28, 0x0A	; 10
 680:	31 f1       	breq	.+76     	; 0x6ce <GLCD_DisplayChar+0x70>
    {
        ptr= &ARR_GlcdFont_U8[var_lcdData_u8][0]; /* Get the address of the Character pattern from LookUp */
 682:	8c 2f       	mov	r24, r28
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	ec 01       	movw	r28, r24
 688:	cc 0f       	add	r28, r28
 68a:	dd 1f       	adc	r29, r29
 68c:	cc 0f       	add	r28, r28
 68e:	dd 1f       	adc	r29, r29
 690:	cc 0f       	add	r28, r28
 692:	dd 1f       	adc	r29, r29
 694:	c8 1b       	sub	r28, r24
 696:	d9 0b       	sbc	r29, r25
 698:	cc 5c       	subi	r28, 0xCC	; 204
 69a:	de 4f       	sbci	r29, 0xFE	; 254
        while(1)
        {
            if((GLCD.PageNum == 0x00) && (GLCD.CursorPos==0x80))
 69c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 6a0:	81 11       	cpse	r24, r1
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <GLCD_DisplayChar+0x52>
 6a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end+0x2>
 6a8:	80 38       	cpi	r24, 0x80	; 128
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <GLCD_DisplayChar+0x52>
            {
                /* If the cursor has reached to end of line on page0
                     Then Move the cursor to Page1 */
                GLCD_GoToPage(1);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	72 df       	rcall	.-284    	; 0x594 <GLCD_GoToPage>
            }

            dat= pgm_read_byte(ptr++);/* Get the data to be displayed for LookUptable*/
 6b0:	8e 01       	movw	r16, r28
 6b2:	0f 5f       	subi	r16, 0xFF	; 255
 6b4:	1f 4f       	sbci	r17, 0xFF	; 255
 6b6:	fe 01       	movw	r30, r28
 6b8:	84 91       	lpm	r24, Z

            if(dat==0xff) /* Exit the loop if End of char is encountered */
 6ba:	8f 3f       	cpi	r24, 0xFF	; 255
                break;

            glcd_DataWrite(dat); /* Display the data and keep track of cursor */
 6bc:	41 f0       	breq	.+16     	; 0x6ce <GLCD_DisplayChar+0x70>
 6be:	54 df       	rcall	.-344    	; 0x568 <glcd_DataWrite>
            GLCD.CursorPos++;
 6c0:	ee e2       	ldi	r30, 0x2E	; 46
 6c2:	f1 e0       	ldi	r31, 0x01	; 1
 6c4:	82 81       	ldd	r24, Z+2	; 0x02
 6c6:	8f 5f       	subi	r24, 0xFF	; 255
 6c8:	82 83       	std	Z+2, r24	; 0x02
                /* If the cursor has reached to end of line on page0
                     Then Move the cursor to Page1 */
                GLCD_GoToPage(1);
            }

            dat= pgm_read_byte(ptr++);/* Get the data to be displayed for LookUptable*/
 6ca:	e8 01       	movw	r28, r16
            if(dat==0xff) /* Exit the loop if End of char is encountered */
                break;

            glcd_DataWrite(dat); /* Display the data and keep track of cursor */
            GLCD.CursorPos++;
        }
 6cc:	e7 cf       	rjmp	.-50     	; 0x69c <GLCD_DisplayChar+0x3e>
    }
}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	08 95       	ret

000006d8 <GLCD_DisplayString>:
                 1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR)and displays a char each time.
 ***************************************************************************************************/
#if (Enable_GLCD_DisplayString==1)
void GLCD_DisplayString(char *ptr_stringPointer_u8)
{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	ec 01       	movw	r28, r24
    while((*ptr_stringPointer_u8)!=0)
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <GLCD_DisplayString+0xc>
        GLCD_DisplayChar(*ptr_stringPointer_u8++); // Loop through the string and display char by char
 6e0:	21 96       	adiw	r28, 0x01	; 1
 6e2:	bd df       	rcall	.-134    	; 0x65e <GLCD_DisplayChar>
                    and traverses till the end(NULL CHAR)and displays a char each time.
 ***************************************************************************************************/
#if (Enable_GLCD_DisplayString==1)
void GLCD_DisplayString(char *ptr_stringPointer_u8)
{
    while((*ptr_stringPointer_u8)!=0)
 6e4:	88 81       	ld	r24, Y
 6e6:	81 11       	cpse	r24, r1
 6e8:	fb cf       	rjmp	.-10     	; 0x6e0 <GLCD_DisplayString+0x8>
        GLCD_DisplayChar(*ptr_stringPointer_u8++); // Loop through the string and display char by char
}
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	08 95       	ret

000006f0 <GLCD_DisplayDecimalNumber>:
                2.(12345,6) then 6-digits ie. 012345 will be displayed
                3.(12345,C_DisplayDefaultDigits_U8) then 12345 will be displayed.
 ***************************************************************************************************/
#if ((Enable_GLCD_DisplayDecimalNumber == 1) || (Enable_GLCD_DisplayFloatNumber == 1))
void GLCD_DisplayDecimalNumber(uint32_t var_DecNumber_u32, uint8_t var_numOfDigitsToDisplay_u8)
{
 6f0:	ff 92       	push	r15
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	cd b7       	in	r28, 0x3d	; 61
 6fc:	de b7       	in	r29, 0x3e	; 62
 6fe:	2a 97       	sbiw	r28, 0x0a	; 10
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
 70a:	04 2f       	mov	r16, r20
    uint8_t i=0,a[10];

    if(var_DecNumber_u32==0)
 70c:	61 15       	cp	r22, r1
 70e:	71 05       	cpc	r23, r1
 710:	81 05       	cpc	r24, r1
 712:	91 05       	cpc	r25, r1
 714:	59 f0       	breq	.+22     	; 0x72c <GLCD_DisplayDecimalNumber+0x3c>
 716:	10 e0       	ldi	r17, 0x00	; 0
 718:	36 c0       	rjmp	.+108    	; 0x786 <GLCD_DisplayDecimalNumber+0x96>
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
            a[i] = 0x00;
 71a:	e1 e0       	ldi	r30, 0x01	; 1
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	ec 0f       	add	r30, r28
 720:	fd 1f       	adc	r31, r29
 722:	e1 0f       	add	r30, r17
 724:	f1 1d       	adc	r31, r1
 726:	10 82       	st	Z, r1
    uint8_t i=0,a[10];

    if(var_DecNumber_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
 728:	1f 5f       	subi	r17, 0xFF	; 255
 72a:	01 c0       	rjmp	.+2      	; 0x72e <GLCD_DisplayDecimalNumber+0x3e>
 72c:	10 e0       	ldi	r17, 0x00	; 0
 72e:	10 17       	cp	r17, r16
 730:	d0 f5       	brcc	.+116    	; 0x7a6 <GLCD_DisplayDecimalNumber+0xb6>
 732:	1a 30       	cpi	r17, 0x0A	; 10
 734:	90 f3       	brcs	.-28     	; 0x71a <GLCD_DisplayDecimalNumber+0x2a>
 736:	37 c0       	rjmp	.+110    	; 0x7a6 <GLCD_DisplayDecimalNumber+0xb6>
    {
        for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified var_numOfDigitsToDisplay_u8 */
            if(var_DecNumber_u32!=0)
 738:	61 15       	cp	r22, r1
 73a:	71 05       	cpc	r23, r1
 73c:	81 05       	cpc	r24, r1
 73e:	91 05       	cpc	r25, r1
 740:	c1 f0       	breq	.+48     	; 0x772 <GLCD_DisplayDecimalNumber+0x82>
            {
                /* Extract the digits from the number till it becomes zero.
                First get the remainder and divide the number by 10 each time.
                If var_num_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(var_DecNumber_u32,10);
 742:	f6 2e       	mov	r15, r22
 744:	2a e0       	ldi	r18, 0x0A	; 10
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	40 e0       	ldi	r20, 0x00	; 0
 74a:	50 e0       	ldi	r21, 0x00	; 0
 74c:	88 d3       	rcall	.+1808   	; 0xe5e <__udivmodsi4>
 74e:	62 2f       	mov	r22, r18
 750:	73 2f       	mov	r23, r19
 752:	84 2f       	mov	r24, r20
 754:	95 2f       	mov	r25, r21
 756:	e1 e0       	ldi	r30, 0x01	; 1
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	ec 0f       	add	r30, r28
 75c:	fd 1f       	adc	r31, r29
 75e:	e1 0f       	add	r30, r17
 760:	f1 1d       	adc	r31, r1
 762:	22 0f       	add	r18, r18
 764:	32 2f       	mov	r19, r18
 766:	33 0f       	add	r19, r19
 768:	33 0f       	add	r19, r19
 76a:	23 0f       	add	r18, r19
 76c:	f2 1a       	sub	r15, r18
 76e:	f0 82       	st	Z, r15
 770:	09 c0       	rjmp	.+18     	; 0x784 <GLCD_DisplayDecimalNumber+0x94>
                var_DecNumber_u32=var_DecNumber_u32/10;
            }
            else if( (var_numOfDigitsToDisplay_u8 == C_GlcdDisplayDefaultDigits_U8) ||
 772:	0b 30       	cpi	r16, 0x0B	; 11
 774:	c0 f4       	brcc	.+48     	; 0x7a6 <GLCD_DisplayDecimalNumber+0xb6>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                  then update the remaining digits with zero.
               Ex: var_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
 776:	e1 e0       	ldi	r30, 0x01	; 1
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	ec 0f       	add	r30, r28
 77c:	fd 1f       	adc	r31, r29
 77e:	e1 0f       	add	r30, r17
 780:	f1 1d       	adc	r31, r1
 782:	10 82       	st	Z, r1
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
            a[i] = 0x00;
    }
    else
    {
        for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
 784:	1f 5f       	subi	r17, 0xFF	; 255
 786:	10 17       	cp	r17, r16
 788:	b8 f2       	brcs	.-82     	; 0x738 <GLCD_DisplayDecimalNumber+0x48>
 78a:	0d c0       	rjmp	.+26     	; 0x7a6 <GLCD_DisplayDecimalNumber+0xb6>


    while(i)
    { 
        /* Finally get the ascii values of the digits and display*/
        GLCD_DisplayChar(util_Dec2Ascii(a[i-1]));
 78c:	e1 2f       	mov	r30, r17
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	31 97       	sbiw	r30, 0x01	; 1
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	8c 0f       	add	r24, r28
 798:	9d 1f       	adc	r25, r29
 79a:	e8 0f       	add	r30, r24
 79c:	f9 1f       	adc	r31, r25
 79e:	80 81       	ld	r24, Z
 7a0:	80 5d       	subi	r24, 0xD0	; 208
 7a2:	5d df       	rcall	.-326    	; 0x65e <GLCD_DisplayChar>
        i--;
 7a4:	11 50       	subi	r17, 0x01	; 1
            }
        }
    }


    while(i)
 7a6:	11 11       	cpse	r17, r1
 7a8:	f1 cf       	rjmp	.-30     	; 0x78c <GLCD_DisplayDecimalNumber+0x9c>
    { 
        /* Finally get the ascii values of the digits and display*/
        GLCD_DisplayChar(util_Dec2Ascii(a[i-1]));
        i--;
    }
}
 7aa:	2a 96       	adiw	r28, 0x0a	; 10
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	1f 91       	pop	r17
 7bc:	0f 91       	pop	r16
 7be:	ff 90       	pop	r15
 7c0:	08 95       	ret

000007c2 <GLCD_DisplayHexNumber>:
                2.(0x12AB,6) then 6-digits ie. 0012AB will be displayed
                3.(0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 ***************************************************************************************************/
#if ( Enable_GLCD_DisplayHexNumber == 1 ) 
void GLCD_DisplayHexNumber(uint32_t var_hexNumber_u32,uint8_t var_numOfDigitsToDisplay_u8)
{
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	cd b7       	in	r28, 0x3d	; 61
 7ca:	de b7       	in	r29, 0x3e	; 62
 7cc:	2a 97       	sbiw	r28, 0x0a	; 10
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
    uint8_t i=0,a[10];

    if(var_hexNumber_u32==0)
 7d8:	61 15       	cp	r22, r1
 7da:	71 05       	cpc	r23, r1
 7dc:	81 05       	cpc	r24, r1
 7de:	91 05       	cpc	r25, r1
 7e0:	59 f0       	breq	.+22     	; 0x7f8 <GLCD_DisplayHexNumber+0x36>
 7e2:	10 e0       	ldi	r17, 0x00	; 0
 7e4:	30 c0       	rjmp	.+96     	; 0x846 <GLCD_DisplayHexNumber+0x84>
    {
        /* If the number zero then update the array with the same for displaying */
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
            a[i] = 0x00;
 7e6:	e1 e0       	ldi	r30, 0x01	; 1
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	ec 0f       	add	r30, r28
 7ec:	fd 1f       	adc	r31, r29
 7ee:	e1 0f       	add	r30, r17
 7f0:	f1 1d       	adc	r31, r1
 7f2:	10 82       	st	Z, r1
    uint8_t i=0,a[10];

    if(var_hexNumber_u32==0)
    {
        /* If the number zero then update the array with the same for displaying */
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
 7f4:	1f 5f       	subi	r17, 0xFF	; 255
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <GLCD_DisplayHexNumber+0x38>
 7f8:	10 e0       	ldi	r17, 0x00	; 0
 7fa:	14 17       	cp	r17, r20
 7fc:	c0 f5       	brcc	.+112    	; 0x86e <GLCD_DisplayHexNumber+0xac>
 7fe:	1a 30       	cpi	r17, 0x0A	; 10
 800:	90 f3       	brcs	.-28     	; 0x7e6 <GLCD_DisplayHexNumber+0x24>
 802:	35 c0       	rjmp	.+106    	; 0x86e <GLCD_DisplayHexNumber+0xac>
    {
        for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified var_numOfDigitsToDisplay_u8 */
            if(var_hexNumber_u32!=0)
 804:	61 15       	cp	r22, r1
 806:	71 05       	cpc	r23, r1
 808:	81 05       	cpc	r24, r1
 80a:	91 05       	cpc	r25, r1
 80c:	91 f0       	breq	.+36     	; 0x832 <GLCD_DisplayHexNumber+0x70>
            {
                /* Extract the digits from the number till it becomes zero.
               First get the lower nibble and shift the number 4 times.
               if var_num_u32 = 0xABC then extracted digit will be 0x0C and number will become 0xAB.
               The process continues till it becomes zero or max digits reached*/
                a[i]=(uint8_t)(var_hexNumber_u32 & 0x0f);
 80e:	26 2f       	mov	r18, r22
 810:	2f 70       	andi	r18, 0x0F	; 15
 812:	e1 e0       	ldi	r30, 0x01	; 1
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	ec 0f       	add	r30, r28
 818:	fd 1f       	adc	r31, r29
 81a:	e1 0f       	add	r30, r17
 81c:	f1 1d       	adc	r31, r1
 81e:	20 83       	st	Z, r18
                var_hexNumber_u32=var_hexNumber_u32 >> 4;
 820:	68 94       	set
 822:	13 f8       	bld	r1, 3
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	77 95       	ror	r23
 82a:	67 95       	ror	r22
 82c:	16 94       	lsr	r1
 82e:	d1 f7       	brne	.-12     	; 0x824 <GLCD_DisplayHexNumber+0x62>
 830:	09 c0       	rjmp	.+18     	; 0x844 <GLCD_DisplayHexNumber+0x82>
            }
            else if( (var_numOfDigitsToDisplay_u8 == C_GlcdDisplayDefaultDigits_U8) ||
 832:	4b 30       	cpi	r20, 0x0B	; 11
 834:	e0 f4       	brcc	.+56     	; 0x86e <GLCD_DisplayHexNumber+0xac>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: var_num_u32 is 0x123 and user wants five digits then 00123 has to be displayed */
                a[i]=0x00;
 836:	e1 e0       	ldi	r30, 0x01	; 1
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	ec 0f       	add	r30, r28
 83c:	fd 1f       	adc	r31, r29
 83e:	e1 0f       	add	r30, r17
 840:	f1 1d       	adc	r31, r1
 842:	10 82       	st	Z, r1
        for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<C_GlcdMaxDigitsToDisplay_U8));i++)
            a[i] = 0x00;
    }
    else
    {
        for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
 844:	1f 5f       	subi	r17, 0xFF	; 255
 846:	14 17       	cp	r17, r20
 848:	e8 f2       	brcs	.-70     	; 0x804 <GLCD_DisplayHexNumber+0x42>
 84a:	11 c0       	rjmp	.+34     	; 0x86e <GLCD_DisplayHexNumber+0xac>
    }

    while(i!=0)
    {
        /* Finally get the ascii values of the digits and display*/
        GLCD_DisplayChar(util_Hex2Ascii(a[i-1]));
 84c:	e1 2f       	mov	r30, r17
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	31 97       	sbiw	r30, 0x01	; 1
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	8c 0f       	add	r24, r28
 858:	9d 1f       	adc	r25, r29
 85a:	e8 0f       	add	r30, r24
 85c:	f9 1f       	adc	r31, r25
 85e:	80 81       	ld	r24, Z
 860:	8a 30       	cpi	r24, 0x0A	; 10
 862:	10 f0       	brcs	.+4      	; 0x868 <GLCD_DisplayHexNumber+0xa6>
 864:	89 5c       	subi	r24, 0xC9	; 201
 866:	01 c0       	rjmp	.+2      	; 0x86a <GLCD_DisplayHexNumber+0xa8>
 868:	80 5d       	subi	r24, 0xD0	; 208
 86a:	f9 de       	rcall	.-526    	; 0x65e <GLCD_DisplayChar>
        i--;
 86c:	11 50       	subi	r17, 0x01	; 1
                a[i]=0x00;
            }
        }
    }

    while(i!=0)
 86e:	11 11       	cpse	r17, r1
 870:	ed cf       	rjmp	.-38     	; 0x84c <GLCD_DisplayHexNumber+0x8a>
    {
        /* Finally get the ascii values of the digits and display*/
        GLCD_DisplayChar(util_Hex2Ascii(a[i-1]));
        i--;
    }
}
 872:	2a 96       	adiw	r28, 0x0a	; 10
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	08 95       	ret

00000886 <GLCD_DisplayBinaryNumber>:
                2.(10,8) then 8-LSB will be displayed ie. 00001010
                3.(10,2) then 2-LSB will be displayed ie. 10
 *************************************************************************************************/
#if (Enable_GLCD_DisplayBinaryNumber == 1)
void GLCD_DisplayBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToDisplay_u8)
{
 886:	cf 92       	push	r12
 888:	df 92       	push	r13
 88a:	ef 92       	push	r14
 88c:	ff 92       	push	r15
 88e:	cf 93       	push	r28
 890:	6b 01       	movw	r12, r22
 892:	7c 01       	movw	r14, r24
 894:	c4 2f       	mov	r28, r20
    uint8_t ch;
      
    while(var_numOfBitsToDisplay_u8!=0)
 896:	1b c0       	rjmp	.+54     	; 0x8ce <GLCD_DisplayBinaryNumber+0x48>
    {
        /* Start Extracting the bits from the specified bit positions.
         Get the Acsii values of the bits and display */
        ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToDisplay_u8-1));
 898:	8c 2f       	mov	r24, r28
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	01 97       	sbiw	r24, 0x01	; 1
 89e:	41 e0       	ldi	r20, 0x01	; 1
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <GLCD_DisplayBinaryNumber+0x22>
 8a4:	44 0f       	add	r20, r20
 8a6:	55 1f       	adc	r21, r21
 8a8:	8a 95       	dec	r24
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <GLCD_DisplayBinaryNumber+0x1e>
 8ac:	05 2e       	mov	r0, r21
 8ae:	00 0c       	add	r0, r0
 8b0:	66 0b       	sbc	r22, r22
 8b2:	77 0b       	sbc	r23, r23
 8b4:	4c 21       	and	r20, r12
 8b6:	5d 21       	and	r21, r13
 8b8:	6e 21       	and	r22, r14
 8ba:	7f 21       	and	r23, r15
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	45 2b       	or	r20, r21
 8c0:	46 2b       	or	r20, r22
 8c2:	47 2b       	or	r20, r23
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <GLCD_DisplayBinaryNumber+0x42>
 8c6:	80 e0       	ldi	r24, 0x00	; 0
        GLCD_DisplayChar(util_Dec2Ascii(ch));
 8c8:	80 5d       	subi	r24, 0xD0	; 208
 8ca:	c9 de       	rcall	.-622    	; 0x65e <GLCD_DisplayChar>
        var_numOfBitsToDisplay_u8--;
 8cc:	c1 50       	subi	r28, 0x01	; 1
#if (Enable_GLCD_DisplayBinaryNumber == 1)
void GLCD_DisplayBinaryNumber(uint32_t var_binNumber_u32, uint8_t var_numOfBitsToDisplay_u8)
{
    uint8_t ch;
      
    while(var_numOfBitsToDisplay_u8!=0)
 8ce:	c1 11       	cpse	r28, r1
 8d0:	e3 cf       	rjmp	.-58     	; 0x898 <GLCD_DisplayBinaryNumber+0x12>
         Get the Acsii values of the bits and display */
        ch = util_GetBitStatus(var_binNumber_u32,(var_numOfBitsToDisplay_u8-1));
        GLCD_DisplayChar(util_Dec2Ascii(ch));
        var_numOfBitsToDisplay_u8--;
    }
}
 8d2:	cf 91       	pop	r28
 8d4:	ff 90       	pop	r15
 8d6:	ef 90       	pop	r14
 8d8:	df 90       	pop	r13
 8da:	cf 90       	pop	r12
 8dc:	08 95       	ret

000008de <GLCD_DisplayFloatNumber>:
    Note: Float will be disabled by default as it takes huge controller resources
         It can be enabled by changing value of Enable_GLCD_DisplayFloatNumber to 1 in lcd.h
 **************************************************************************************************/
#if (Enable_GLCD_DisplayFloatNumber == 1)  
void GLCD_DisplayFloatNumber(double var_floatNum_f32)
{
 8de:	8f 92       	push	r8
 8e0:	9f 92       	push	r9
 8e2:	af 92       	push	r10
 8e4:	bf 92       	push	r11
 8e6:	cf 92       	push	r12
 8e8:	df 92       	push	r13
 8ea:	ef 92       	push	r14
 8ec:	ff 92       	push	r15
 8ee:	6b 01       	movw	r12, r22
 8f0:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
      2.Display the extracted integer part followed by a decimal point(.).
      3.Later the integer part is made zero by subtracting with the extracted integer value.
      4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

    var_temp_u32 = (uint32_t) var_floatNum_f32;
 8f2:	98 d1       	rcall	.+816    	; 0xc24 <__fixunssfsi>
 8f4:	4b 01       	movw	r8, r22
 8f6:	5c 01       	movw	r10, r24
    GLCD_DisplayDecimalNumber(var_temp_u32,C_GlcdDisplayDefaultDigits_U8);
 8f8:	4f ef       	ldi	r20, 0xFF	; 255
 8fa:	fa de       	rcall	.-524    	; 0x6f0 <GLCD_DisplayDecimalNumber>

    GLCD_DisplayChar('.');
 8fc:	8e e2       	ldi	r24, 0x2E	; 46
 8fe:	af de       	rcall	.-674    	; 0x65e <GLCD_DisplayChar>

    var_floatNum_f32 = var_floatNum_f32 - var_temp_u32;
 900:	c5 01       	movw	r24, r10
 902:	b4 01       	movw	r22, r8
 904:	bb d1       	rcall	.+886    	; 0xc7c <__floatunsisf>
 906:	9b 01       	movw	r18, r22
 908:	ac 01       	movw	r20, r24
 90a:	c7 01       	movw	r24, r14
 90c:	b6 01       	movw	r22, r12
 90e:	25 d1       	rcall	.+586    	; 0xb5a <__subsf3>
 910:	20 e0       	ldi	r18, 0x00	; 0
    var_temp_u32 = var_floatNum_f32 * 1000000;
 912:	34 e2       	ldi	r19, 0x24	; 36
 914:	44 e7       	ldi	r20, 0x74	; 116
 916:	59 e4       	ldi	r21, 0x49	; 73
 918:	3f d2       	rcall	.+1150   	; 0xd98 <__mulsf3>
 91a:	84 d1       	rcall	.+776    	; 0xc24 <__fixunssfsi>
 91c:	4f ef       	ldi	r20, 0xFF	; 255
    GLCD_DisplayDecimalNumber(var_temp_u32,C_GlcdDisplayDefaultDigits_U8);
 91e:	e8 de       	rcall	.-560    	; 0x6f0 <GLCD_DisplayDecimalNumber>
 920:	ff 90       	pop	r15
 922:	ef 90       	pop	r14
}
 924:	df 90       	pop	r13
 926:	cf 90       	pop	r12
 928:	bf 90       	pop	r11
 92a:	af 90       	pop	r10
 92c:	9f 90       	pop	r9
 92e:	8f 90       	pop	r8
 930:	08 95       	ret

00000932 <GLCD_Printf>:
 932:	4f 92       	push	r4
 934:	5f 92       	push	r5
        uint8_t var_Num_u8;
        GLCD_Printf("num1:%u",(uint16_t)var_Num_u8);          
 *************************************************************************************************/
#if ( Enable_GLCD_Printf   == 1 ) 
void GLCD_Printf(const char *argList, ...)
{
 936:	6f 92       	push	r6
 938:	7f 92       	push	r7
 93a:	af 92       	push	r10
 93c:	bf 92       	push	r11
 93e:	ef 92       	push	r14
 940:	ff 92       	push	r15
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	fe 01       	movw	r30, r28
 94e:	3e 96       	adiw	r30, 0x0e	; 14
 950:	e1 90       	ld	r14, Z+
 952:	f1 90       	ld	r15, Z+
    uint32_t var_num_u32;
    char *str;
    char  ch;
    uint8_t var_numOfDigitsToDisp_u8;

    va_start(argp, argList);
 954:	3f 01       	movw	r6, r30

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 956:	da c0       	rjmp	.+436    	; 0xb0c <GLCD_Printf+0x1da>
    {

        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 958:	85 32       	cpi	r24, 0x25	; 37
 95a:	09 f0       	breq	.+2      	; 0x95e <GLCD_Printf+0x2c>
 95c:	d3 c0       	rjmp	.+422    	; 0xb04 <GLCD_Printf+0x1d2>
        {
            ptr++;
 95e:	c7 01       	movw	r24, r14
 960:	01 96       	adiw	r24, 0x01	; 1
            ch = *ptr;
 962:	d7 01       	movw	r26, r14
 964:	11 96       	adiw	r26, 0x01	; 1
 966:	ec 91       	ld	r30, X
           if((ch>=0x30) && (ch<=0x39))
 968:	20 ed       	ldi	r18, 0xD0	; 208
 96a:	2e 0f       	add	r18, r30
 96c:	2a 30       	cpi	r18, 0x0A	; 10
 96e:	90 f0       	brcs	.+36     	; 0x994 <GLCD_Printf+0x62>
    {

        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
 970:	7c 01       	movw	r14, r24
                   ch = *ptr;
                }
            }
            else
            {
              var_numOfDigitsToDisp_u8 = C_GlcdMaxDigitsToDisplayUsingPrintf_U8;
 972:	1f ef       	ldi	r17, 0xFF	; 255
 974:	15 c0       	rjmp	.+42     	; 0x9a0 <GLCD_Printf+0x6e>
           if((ch>=0x30) && (ch<=0x39))
            {
               var_numOfDigitsToDisp_u8 = 0;
               while((ch>=0x30) && (ch<=0x39))
                {
                   var_numOfDigitsToDisp_u8 = (var_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
 976:	81 2f       	mov	r24, r17
 978:	88 0f       	add	r24, r24
 97a:	98 2f       	mov	r25, r24
 97c:	99 0f       	add	r25, r25
 97e:	99 0f       	add	r25, r25
 980:	89 0f       	add	r24, r25
 982:	8e 0f       	add	r24, r30
 984:	10 ed       	ldi	r17, 0xD0	; 208
 986:	18 0f       	add	r17, r24
                   ptr++;
 988:	bf ef       	ldi	r27, 0xFF	; 255
 98a:	eb 1a       	sub	r14, r27
 98c:	fb 0a       	sbc	r15, r27
                   ch = *ptr;
 98e:	d7 01       	movw	r26, r14
 990:	ec 91       	ld	r30, X
 992:	02 c0       	rjmp	.+4      	; 0x998 <GLCD_Printf+0x66>
 994:	7c 01       	movw	r14, r24
 996:	10 e0       	ldi	r17, 0x00	; 0
            ptr++;
            ch = *ptr;
           if((ch>=0x30) && (ch<=0x39))
            {
               var_numOfDigitsToDisp_u8 = 0;
               while((ch>=0x30) && (ch<=0x39))
 998:	80 ed       	ldi	r24, 0xD0	; 208
 99a:	8e 0f       	add	r24, r30
 99c:	8a 30       	cpi	r24, 0x0A	; 10
 99e:	58 f3       	brcs	.-42     	; 0x976 <GLCD_Printf+0x44>
            {
              var_numOfDigitsToDisp_u8 = C_GlcdMaxDigitsToDisplayUsingPrintf_U8;
            }


            switch(ch)       /* Decode the type of the argument */
 9a0:	8e 2f       	mov	r24, r30
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	fc 01       	movw	r30, r24
 9a6:	b5 97       	sbiw	r30, 0x25	; 37
 9a8:	e4 35       	cpi	r30, 0x54	; 84
 9aa:	f1 05       	cpc	r31, r1
 9ac:	08 f0       	brcs	.+2      	; 0x9b0 <GLCD_Printf+0x7e>
 9ae:	ab c0       	rjmp	.+342    	; 0xb06 <GLCD_Printf+0x1d4>
 9b0:	ea 5b       	subi	r30, 0xBA	; 186
 9b2:	ff 4f       	sbci	r31, 0xFF	; 255
 9b4:	76 c2       	rjmp	.+1260   	; 0xea2 <__tablejump2__>
            {
            case 'C':
            case 'c':     /* Argument type is of char, hence read char data from the argp */
                ch = va_arg(argp, uint16_t);
 9b6:	53 01       	movw	r10, r6
 9b8:	b2 e0       	ldi	r27, 0x02	; 2
 9ba:	ab 0e       	add	r10, r27
 9bc:	b1 1c       	adc	r11, r1
                GLCD_DisplayChar(ch);
 9be:	f3 01       	movw	r30, r6
 9c0:	80 81       	ld	r24, Z
 9c2:	4d de       	rcall	.-870    	; 0x65e <GLCD_DisplayChar>

            switch(ch)       /* Decode the type of the argument */
            {
            case 'C':
            case 'c':     /* Argument type is of char, hence read char data from the argp */
                ch = va_arg(argp, uint16_t);
 9c4:	35 01       	movw	r6, r10
                GLCD_DisplayChar(ch);
                break;
 9c6:	9f c0       	rjmp	.+318    	; 0xb06 <GLCD_Printf+0x1d4>

            case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                var_num_s16 = va_arg(argp, sint16_t);
 9c8:	53 01       	movw	r10, r6
 9ca:	f2 e0       	ldi	r31, 0x02	; 2
 9cc:	af 0e       	add	r10, r31
 9ce:	b1 1c       	adc	r11, r1
 9d0:	d3 01       	movw	r26, r6
 9d2:	6d 90       	ld	r6, X+
 9d4:	7c 90       	ld	r7, X
#if (Enable_GLCD_DisplayDecimalNumber == 1)
                if(var_num_s16<0)
 9d6:	77 20       	and	r7, r7
 9d8:	2c f4       	brge	.+10     	; 0x9e4 <GLCD_Printf+0xb2>
                 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
                   var_num_s16 = -var_num_s16;
 9da:	71 94       	neg	r7
 9dc:	61 94       	neg	r6
                   GLCD_DisplayChar('-');
 9de:	71 08       	sbc	r7, r1
 9e0:	8d e2       	ldi	r24, 0x2D	; 45
 9e2:	3d de       	rcall	.-902    	; 0x65e <GLCD_DisplayChar>
                 }
                GLCD_DisplayDecimalNumber(var_num_s16,var_numOfDigitsToDisp_u8);
 9e4:	b3 01       	movw	r22, r6
 9e6:	77 0c       	add	r7, r7
 9e8:	88 0b       	sbc	r24, r24
 9ea:	99 0b       	sbc	r25, r25
 9ec:	41 2f       	mov	r20, r17
 9ee:	80 de       	rcall	.-768    	; 0x6f0 <GLCD_DisplayDecimalNumber>
                ch = va_arg(argp, uint16_t);
                GLCD_DisplayChar(ch);
                break;

            case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                var_num_s16 = va_arg(argp, sint16_t);
 9f0:	35 01       	movw	r6, r10
                   var_num_s16 = -var_num_s16;
                   GLCD_DisplayChar('-');
                 }
                GLCD_DisplayDecimalNumber(var_num_s16,var_numOfDigitsToDisp_u8);
#endif
                break;
 9f2:	89 c0       	rjmp	.+274    	; 0xb06 <GLCD_Printf+0x1d4>
                
            case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                var_num_s32 = va_arg(argp, sint32_t);
 9f4:	53 01       	movw	r10, r6
 9f6:	b4 e0       	ldi	r27, 0x04	; 4
 9f8:	ab 0e       	add	r10, r27
 9fa:	b1 1c       	adc	r11, r1
 9fc:	f3 01       	movw	r30, r6
 9fe:	40 80       	ld	r4, Z
 a00:	51 80       	ldd	r5, Z+1	; 0x01
 a02:	62 80       	ldd	r6, Z+2	; 0x02
 a04:	73 80       	ldd	r7, Z+3	; 0x03
#if (Enable_GLCD_DisplayDecimalNumber == 1)                
                if(var_num_s32<0)
 a06:	77 20       	and	r7, r7
 a08:	54 f4       	brge	.+20     	; 0xa1e <GLCD_Printf+0xec>
                 { /* If the number is -ve then display the 2's complement along with '-' sign */
                   var_num_s32 = -var_num_s32;
 a0a:	70 94       	com	r7
 a0c:	60 94       	com	r6
 a0e:	50 94       	com	r5
 a10:	40 94       	com	r4
 a12:	41 1c       	adc	r4, r1
 a14:	51 1c       	adc	r5, r1
 a16:	61 1c       	adc	r6, r1
                   GLCD_DisplayChar('-');
 a18:	71 1c       	adc	r7, r1
 a1a:	8d e2       	ldi	r24, 0x2D	; 45
                 }
                GLCD_DisplayDecimalNumber(var_num_s32,var_numOfDigitsToDisp_u8);
 a1c:	20 de       	rcall	.-960    	; 0x65e <GLCD_DisplayChar>
 a1e:	41 2f       	mov	r20, r17
 a20:	c3 01       	movw	r24, r6
 a22:	b2 01       	movw	r22, r4
 a24:	65 de       	rcall	.-822    	; 0x6f0 <GLCD_DisplayDecimalNumber>
                GLCD_DisplayDecimalNumber(var_num_s16,var_numOfDigitsToDisp_u8);
#endif
                break;
                
            case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                var_num_s32 = va_arg(argp, sint32_t);
 a26:	35 01       	movw	r6, r10
                   var_num_s32 = -var_num_s32;
                   GLCD_DisplayChar('-');
                 }
                GLCD_DisplayDecimalNumber(var_num_s32,var_numOfDigitsToDisp_u8);
#endif                
                break;    
 a28:	6e c0       	rjmp	.+220    	; 0xb06 <GLCD_Printf+0x1d4>

            case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                var_num_u16 = va_arg(argp, uint16_t);
 a2a:	53 01       	movw	r10, r6
 a2c:	f2 e0       	ldi	r31, 0x02	; 2
 a2e:	af 0e       	add	r10, r31
 a30:	b1 1c       	adc	r11, r1
 a32:	d3 01       	movw	r26, r6
 a34:	6d 91       	ld	r22, X+
#if (Enable_GLCD_DisplayDecimalNumber == 1)                
                GLCD_DisplayDecimalNumber(var_num_u16,var_numOfDigitsToDisp_u8);
 a36:	7c 91       	ld	r23, X
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	41 2f       	mov	r20, r17
 a3e:	58 de       	rcall	.-848    	; 0x6f0 <GLCD_DisplayDecimalNumber>
                GLCD_DisplayDecimalNumber(var_num_s32,var_numOfDigitsToDisp_u8);
#endif                
                break;    

            case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                var_num_u16 = va_arg(argp, uint16_t);
 a40:	35 01       	movw	r6, r10
#if (Enable_GLCD_DisplayDecimalNumber == 1)                
                GLCD_DisplayDecimalNumber(var_num_u16,var_numOfDigitsToDisp_u8);
#endif                
                break;
 a42:	61 c0       	rjmp	.+194    	; 0xb06 <GLCD_Printf+0x1d4>
            
            case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                var_num_u32 = va_arg(argp, uint32_t);
 a44:	53 01       	movw	r10, r6
 a46:	b4 e0       	ldi	r27, 0x04	; 4
 a48:	ab 0e       	add	r10, r27
 a4a:	b1 1c       	adc	r11, r1
 a4c:	f3 01       	movw	r30, r6
 a4e:	60 81       	ld	r22, Z
 a50:	71 81       	ldd	r23, Z+1	; 0x01
 a52:	82 81       	ldd	r24, Z+2	; 0x02
#if (Enable_GLCD_DisplayDecimalNumber == 1)                
                GLCD_DisplayDecimalNumber(var_num_u32,var_numOfDigitsToDisp_u8);
 a54:	93 81       	ldd	r25, Z+3	; 0x03
 a56:	41 2f       	mov	r20, r17
 a58:	4b de       	rcall	.-874    	; 0x6f0 <GLCD_DisplayDecimalNumber>
                GLCD_DisplayDecimalNumber(var_num_u16,var_numOfDigitsToDisp_u8);
#endif                
                break;
            
            case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                var_num_u32 = va_arg(argp, uint32_t);
 a5a:	35 01       	movw	r6, r10
#if (Enable_GLCD_DisplayDecimalNumber == 1)                
                GLCD_DisplayDecimalNumber(var_num_u32,var_numOfDigitsToDisp_u8);
#endif                
                break;            
 a5c:	54 c0       	rjmp	.+168    	; 0xb06 <GLCD_Printf+0x1d4>

            case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                var_num_u16 = va_arg(argp, uint16_t);
 a5e:	53 01       	movw	r10, r6
 a60:	f2 e0       	ldi	r31, 0x02	; 2
 a62:	af 0e       	add	r10, r31
 a64:	b1 1c       	adc	r11, r1
 a66:	d3 01       	movw	r26, r6
 a68:	6d 91       	ld	r22, X+
#if (Enable_GLCD_DisplayHexNumber == 1)                
                GLCD_DisplayHexNumber(var_num_u16,var_numOfDigitsToDisp_u8);
 a6a:	7c 91       	ld	r23, X
 a6c:	80 e0       	ldi	r24, 0x00	; 0
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	41 2f       	mov	r20, r17
 a72:	a7 de       	rcall	.-690    	; 0x7c2 <GLCD_DisplayHexNumber>
                GLCD_DisplayDecimalNumber(var_num_u32,var_numOfDigitsToDisp_u8);
#endif                
                break;            

            case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                var_num_u16 = va_arg(argp, uint16_t);
 a74:	35 01       	movw	r6, r10
#if (Enable_GLCD_DisplayHexNumber == 1)                
                GLCD_DisplayHexNumber(var_num_u16,var_numOfDigitsToDisp_u8);
#endif                
                break;
 a76:	47 c0       	rjmp	.+142    	; 0xb06 <GLCD_Printf+0x1d4>

            case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                var_num_u32 = va_arg(argp, uint32_t);
 a78:	53 01       	movw	r10, r6
 a7a:	b4 e0       	ldi	r27, 0x04	; 4
 a7c:	ab 0e       	add	r10, r27
 a7e:	b1 1c       	adc	r11, r1
 a80:	f3 01       	movw	r30, r6
 a82:	60 81       	ld	r22, Z
 a84:	71 81       	ldd	r23, Z+1	; 0x01
 a86:	82 81       	ldd	r24, Z+2	; 0x02
#if (Enable_GLCD_DisplayHexNumber == 1)                        
                GLCD_DisplayHexNumber(var_num_u32,var_numOfDigitsToDisp_u8);
 a88:	93 81       	ldd	r25, Z+3	; 0x03
 a8a:	41 2f       	mov	r20, r17
 a8c:	9a de       	rcall	.-716    	; 0x7c2 <GLCD_DisplayHexNumber>
                GLCD_DisplayHexNumber(var_num_u16,var_numOfDigitsToDisp_u8);
#endif                
                break;

            case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                var_num_u32 = va_arg(argp, uint32_t);
 a8e:	35 01       	movw	r6, r10
#if (Enable_GLCD_DisplayHexNumber == 1)                        
                GLCD_DisplayHexNumber(var_num_u32,var_numOfDigitsToDisp_u8);
#endif                
                break;
 a90:	3a c0       	rjmp	.+116    	; 0xb06 <GLCD_Printf+0x1d4>

            
            case 'b':  /* Argument type is of binary,Read int and convert to binary */
                var_num_u16 = va_arg(argp, uint16_t);
 a92:	53 01       	movw	r10, r6
 a94:	f2 e0       	ldi	r31, 0x02	; 2
 a96:	af 0e       	add	r10, r31
 a98:	b1 1c       	adc	r11, r1
 a9a:	d3 01       	movw	r26, r6
 a9c:	6d 91       	ld	r22, X+
#if (Enable_GLCD_DisplayBinaryNumber == 1)                        
                if(var_numOfDigitsToDisp_u8 == C_GlcdMaxDigitsToDisplayUsingPrintf_U8)
 a9e:	7c 91       	ld	r23, X
 aa0:	1f 3f       	cpi	r17, 0xFF	; 255
                   var_numOfDigitsToDisp_u8 = 16;
 aa2:	09 f4       	brne	.+2      	; 0xaa6 <GLCD_Printf+0x174>
                GLCD_DisplayBinaryNumber(var_num_u16,var_numOfDigitsToDisp_u8);
 aa4:	10 e1       	ldi	r17, 0x10	; 16
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	41 2f       	mov	r20, r17
 aac:	ec de       	rcall	.-552    	; 0x886 <GLCD_DisplayBinaryNumber>
#endif                
                break;

            
            case 'b':  /* Argument type is of binary,Read int and convert to binary */
                var_num_u16 = va_arg(argp, uint16_t);
 aae:	35 01       	movw	r6, r10
#if (Enable_GLCD_DisplayBinaryNumber == 1)                        
                if(var_numOfDigitsToDisp_u8 == C_GlcdMaxDigitsToDisplayUsingPrintf_U8)
                   var_numOfDigitsToDisp_u8 = 16;
                GLCD_DisplayBinaryNumber(var_num_u16,var_numOfDigitsToDisp_u8);
#endif                
                break;
 ab0:	2a c0       	rjmp	.+84     	; 0xb06 <GLCD_Printf+0x1d4>

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                var_num_u32 = va_arg(argp, uint32_t);
 ab2:	53 01       	movw	r10, r6
 ab4:	b4 e0       	ldi	r27, 0x04	; 4
 ab6:	ab 0e       	add	r10, r27
 ab8:	b1 1c       	adc	r11, r1
 aba:	f3 01       	movw	r30, r6
 abc:	60 81       	ld	r22, Z
 abe:	71 81       	ldd	r23, Z+1	; 0x01
 ac0:	82 81       	ldd	r24, Z+2	; 0x02
#if (Enable_GLCD_DisplayBinaryNumber == 1)                
                if(var_numOfDigitsToDisp_u8 == C_GlcdMaxDigitsToDisplayUsingPrintf_U8)
 ac2:	93 81       	ldd	r25, Z+3	; 0x03
 ac4:	1f 3f       	cpi	r17, 0xFF	; 255
                   var_numOfDigitsToDisp_u8 = 16;                
 ac6:	09 f4       	brne	.+2      	; 0xaca <GLCD_Printf+0x198>
                GLCD_DisplayBinaryNumber(var_num_u32,var_numOfDigitsToDisp_u8);    
 ac8:	10 e1       	ldi	r17, 0x10	; 16
 aca:	41 2f       	mov	r20, r17
                GLCD_DisplayBinaryNumber(var_num_u16,var_numOfDigitsToDisp_u8);
#endif                
                break;

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                var_num_u32 = va_arg(argp, uint32_t);
 acc:	dc de       	rcall	.-584    	; 0x886 <GLCD_DisplayBinaryNumber>
#if (Enable_GLCD_DisplayBinaryNumber == 1)                
                if(var_numOfDigitsToDisp_u8 == C_GlcdMaxDigitsToDisplayUsingPrintf_U8)
                   var_numOfDigitsToDisp_u8 = 16;                
                GLCD_DisplayBinaryNumber(var_num_u32,var_numOfDigitsToDisp_u8);    
#endif                
                break;
 ace:	35 01       	movw	r6, r10


            case 'F':
            case 'f': /* Argument type is of float, hence read double data from the argp */
                var_floatNum_f32 = va_arg(argp, double);
 ad0:	1a c0       	rjmp	.+52     	; 0xb06 <GLCD_Printf+0x1d4>
 ad2:	53 01       	movw	r10, r6
 ad4:	f4 e0       	ldi	r31, 0x04	; 4
 ad6:	af 0e       	add	r10, r31
 ad8:	b1 1c       	adc	r11, r1
 ada:	d3 01       	movw	r26, r6
 adc:	6d 91       	ld	r22, X+
 ade:	7d 91       	ld	r23, X+
#if (Enable_GLCD_DisplayFloatNumber == 1)                
                GLCD_DisplayFloatNumber(var_floatNum_f32);
 ae0:	8d 91       	ld	r24, X+
 ae2:	9c 91       	ld	r25, X
#endif
                break;
 ae4:	fc de       	rcall	.-520    	; 0x8de <GLCD_DisplayFloatNumber>


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
 ae6:	35 01       	movw	r6, r10
 ae8:	0e c0       	rjmp	.+28     	; 0xb06 <GLCD_Printf+0x1d4>
 aea:	53 01       	movw	r10, r6
#if (Enable_GLCD_DisplayString == 1)
                GLCD_DisplayString(str);
 aec:	b2 e0       	ldi	r27, 0x02	; 2
 aee:	ab 0e       	add	r10, r27
 af0:	b1 1c       	adc	r11, r1
 af2:	f3 01       	movw	r30, r6
 af4:	80 81       	ld	r24, Z
                break;


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
 af6:	91 81       	ldd	r25, Z+1	; 0x01
#if (Enable_GLCD_DisplayString == 1)
                GLCD_DisplayString(str);
#endif                
                break;
 af8:	ef dd       	rcall	.-1058   	; 0x6d8 <GLCD_DisplayString>

            case '%':
                GLCD_DisplayChar('%');
 afa:	35 01       	movw	r6, r10
 afc:	04 c0       	rjmp	.+8      	; 0xb06 <GLCD_Printf+0x1d4>
 afe:	85 e2       	ldi	r24, 0x25	; 37
                break;
 b00:	ae dd       	rcall	.-1188   	; 0x65e <GLCD_DisplayChar>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            GLCD_DisplayChar(ch);
 b02:	01 c0       	rjmp	.+2      	; 0xb06 <GLCD_Printf+0x1d4>
 b04:	ac dd       	rcall	.-1192   	; 0x65e <GLCD_DisplayChar>
    uint8_t var_numOfDigitsToDisp_u8;

    va_start(argp, argList);

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 b06:	ff ef       	ldi	r31, 0xFF	; 255
 b08:	ef 1a       	sub	r14, r31
 b0a:	ff 0a       	sbc	r15, r31
 b0c:	d7 01       	movw	r26, r14
 b0e:	8c 91       	ld	r24, X
 b10:	81 11       	cpse	r24, r1
 b12:	22 cf       	rjmp	.-444    	; 0x958 <GLCD_Printf+0x26>
            GLCD_DisplayChar(ch);
        }
    }

    va_end(argp);
}
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	ff 90       	pop	r15
 b1c:	ef 90       	pop	r14
 b1e:	bf 90       	pop	r11
 b20:	af 90       	pop	r10
 b22:	7f 90       	pop	r7
 b24:	6f 90       	pop	r6
 b26:	5f 90       	pop	r5
 b28:	4f 90       	pop	r4
 b2a:	08 95       	ret

00000b2c <main>:
#include "glcd.h"	//User defined LCD library which conatins the lcd routines

/* start the main program */
void main()
{
	GLCD_Init();
 b2c:	74 dd       	rcall	.-1304   	; 0x616 <GLCD_Init>
	GLCD_Printf("Hello World!");
 b2e:	80 e0       	ldi	r24, 0x00	; 0
 b30:	91 e0       	ldi	r25, 0x01	; 1
 b32:	9f 93       	push	r25
 b34:	8f 93       	push	r24
 b36:	fd de       	rcall	.-518    	; 0x932 <GLCD_Printf>
	GLCD_GoToLine(4);
 b38:	84 e0       	ldi	r24, 0x04	; 4
 b3a:	44 dd       	rcall	.-1400   	; 0x5c4 <GLCD_GoToLine>
 b3c:	8d e0       	ldi	r24, 0x0D	; 13
	GLCD_Printf("*&^%$#@!~");
 b3e:	91 e0       	ldi	r25, 0x01	; 1
 b40:	9f 93       	push	r25
 b42:	8f 93       	push	r24
 b44:	f6 de       	rcall	.-532    	; 0x932 <GLCD_Printf>
	GLCD_GoToLine(7);
 b46:	87 e0       	ldi	r24, 0x07	; 7
 b48:	3d dd       	rcall	.-1414   	; 0x5c4 <GLCD_GoToLine>
	GLCD_DisplayString("Well this is the end!");
 b4a:	87 e1       	ldi	r24, 0x17	; 23
 b4c:	91 e0       	ldi	r25, 0x01	; 1
 b4e:	c4 dd       	rcall	.-1144   	; 0x6d8 <GLCD_DisplayString>
 b50:	0f 90       	pop	r0
 b52:	0f 90       	pop	r0
 b54:	0f 90       	pop	r0
 b56:	0f 90       	pop	r0
 b58:	ff cf       	rjmp	.-2      	; 0xb58 <main+0x2c>

00000b5a <__subsf3>:
 b5a:	50 58       	subi	r21, 0x80	; 128

00000b5c <__addsf3>:
 b5c:	bb 27       	eor	r27, r27
 b5e:	aa 27       	eor	r26, r26
 b60:	0e d0       	rcall	.+28     	; 0xb7e <__addsf3x>
 b62:	e0 c0       	rjmp	.+448    	; 0xd24 <__fp_round>
 b64:	d1 d0       	rcall	.+418    	; 0xd08 <__fp_pscA>
 b66:	30 f0       	brcs	.+12     	; 0xb74 <__addsf3+0x18>
 b68:	d6 d0       	rcall	.+428    	; 0xd16 <__fp_pscB>
 b6a:	20 f0       	brcs	.+8      	; 0xb74 <__addsf3+0x18>
 b6c:	31 f4       	brne	.+12     	; 0xb7a <__addsf3+0x1e>
 b6e:	9f 3f       	cpi	r25, 0xFF	; 255
 b70:	11 f4       	brne	.+4      	; 0xb76 <__addsf3+0x1a>
 b72:	1e f4       	brtc	.+6      	; 0xb7a <__addsf3+0x1e>
 b74:	c6 c0       	rjmp	.+396    	; 0xd02 <__fp_nan>
 b76:	0e f4       	brtc	.+2      	; 0xb7a <__addsf3+0x1e>
 b78:	e0 95       	com	r30
 b7a:	e7 fb       	bst	r30, 7
 b7c:	bc c0       	rjmp	.+376    	; 0xcf6 <__fp_inf>

00000b7e <__addsf3x>:
 b7e:	e9 2f       	mov	r30, r25
 b80:	e2 d0       	rcall	.+452    	; 0xd46 <__fp_split3>
 b82:	80 f3       	brcs	.-32     	; 0xb64 <__addsf3+0x8>
 b84:	ba 17       	cp	r27, r26
 b86:	62 07       	cpc	r22, r18
 b88:	73 07       	cpc	r23, r19
 b8a:	84 07       	cpc	r24, r20
 b8c:	95 07       	cpc	r25, r21
 b8e:	18 f0       	brcs	.+6      	; 0xb96 <__addsf3x+0x18>
 b90:	71 f4       	brne	.+28     	; 0xbae <__addsf3x+0x30>
 b92:	9e f5       	brtc	.+102    	; 0xbfa <__addsf3x+0x7c>
 b94:	fa c0       	rjmp	.+500    	; 0xd8a <__fp_zero>
 b96:	0e f4       	brtc	.+2      	; 0xb9a <__addsf3x+0x1c>
 b98:	e0 95       	com	r30
 b9a:	0b 2e       	mov	r0, r27
 b9c:	ba 2f       	mov	r27, r26
 b9e:	a0 2d       	mov	r26, r0
 ba0:	0b 01       	movw	r0, r22
 ba2:	b9 01       	movw	r22, r18
 ba4:	90 01       	movw	r18, r0
 ba6:	0c 01       	movw	r0, r24
 ba8:	ca 01       	movw	r24, r20
 baa:	a0 01       	movw	r20, r0
 bac:	11 24       	eor	r1, r1
 bae:	ff 27       	eor	r31, r31
 bb0:	59 1b       	sub	r21, r25
 bb2:	99 f0       	breq	.+38     	; 0xbda <__addsf3x+0x5c>
 bb4:	59 3f       	cpi	r21, 0xF9	; 249
 bb6:	50 f4       	brcc	.+20     	; 0xbcc <__addsf3x+0x4e>
 bb8:	50 3e       	cpi	r21, 0xE0	; 224
 bba:	68 f1       	brcs	.+90     	; 0xc16 <__addsf3x+0x98>
 bbc:	1a 16       	cp	r1, r26
 bbe:	f0 40       	sbci	r31, 0x00	; 0
 bc0:	a2 2f       	mov	r26, r18
 bc2:	23 2f       	mov	r18, r19
 bc4:	34 2f       	mov	r19, r20
 bc6:	44 27       	eor	r20, r20
 bc8:	58 5f       	subi	r21, 0xF8	; 248
 bca:	f3 cf       	rjmp	.-26     	; 0xbb2 <__addsf3x+0x34>
 bcc:	46 95       	lsr	r20
 bce:	37 95       	ror	r19
 bd0:	27 95       	ror	r18
 bd2:	a7 95       	ror	r26
 bd4:	f0 40       	sbci	r31, 0x00	; 0
 bd6:	53 95       	inc	r21
 bd8:	c9 f7       	brne	.-14     	; 0xbcc <__addsf3x+0x4e>
 bda:	7e f4       	brtc	.+30     	; 0xbfa <__addsf3x+0x7c>
 bdc:	1f 16       	cp	r1, r31
 bde:	ba 0b       	sbc	r27, r26
 be0:	62 0b       	sbc	r22, r18
 be2:	73 0b       	sbc	r23, r19
 be4:	84 0b       	sbc	r24, r20
 be6:	ba f0       	brmi	.+46     	; 0xc16 <__addsf3x+0x98>
 be8:	91 50       	subi	r25, 0x01	; 1
 bea:	a1 f0       	breq	.+40     	; 0xc14 <__addsf3x+0x96>
 bec:	ff 0f       	add	r31, r31
 bee:	bb 1f       	adc	r27, r27
 bf0:	66 1f       	adc	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	c2 f7       	brpl	.-16     	; 0xbe8 <__addsf3x+0x6a>
 bf8:	0e c0       	rjmp	.+28     	; 0xc16 <__addsf3x+0x98>
 bfa:	ba 0f       	add	r27, r26
 bfc:	62 1f       	adc	r22, r18
 bfe:	73 1f       	adc	r23, r19
 c00:	84 1f       	adc	r24, r20
 c02:	48 f4       	brcc	.+18     	; 0xc16 <__addsf3x+0x98>
 c04:	87 95       	ror	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	b7 95       	ror	r27
 c0c:	f7 95       	ror	r31
 c0e:	9e 3f       	cpi	r25, 0xFE	; 254
 c10:	08 f0       	brcs	.+2      	; 0xc14 <__addsf3x+0x96>
 c12:	b3 cf       	rjmp	.-154    	; 0xb7a <__addsf3+0x1e>
 c14:	93 95       	inc	r25
 c16:	88 0f       	add	r24, r24
 c18:	08 f0       	brcs	.+2      	; 0xc1c <__addsf3x+0x9e>
 c1a:	99 27       	eor	r25, r25
 c1c:	ee 0f       	add	r30, r30
 c1e:	97 95       	ror	r25
 c20:	87 95       	ror	r24
 c22:	08 95       	ret

00000c24 <__fixunssfsi>:
 c24:	98 d0       	rcall	.+304    	; 0xd56 <__fp_splitA>
 c26:	88 f0       	brcs	.+34     	; 0xc4a <__fixunssfsi+0x26>
 c28:	9f 57       	subi	r25, 0x7F	; 127
 c2a:	90 f0       	brcs	.+36     	; 0xc50 <__fixunssfsi+0x2c>
 c2c:	b9 2f       	mov	r27, r25
 c2e:	99 27       	eor	r25, r25
 c30:	b7 51       	subi	r27, 0x17	; 23
 c32:	a0 f0       	brcs	.+40     	; 0xc5c <__fixunssfsi+0x38>
 c34:	d1 f0       	breq	.+52     	; 0xc6a <__fixunssfsi+0x46>
 c36:	66 0f       	add	r22, r22
 c38:	77 1f       	adc	r23, r23
 c3a:	88 1f       	adc	r24, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	1a f0       	brmi	.+6      	; 0xc46 <__fixunssfsi+0x22>
 c40:	ba 95       	dec	r27
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__fixunssfsi+0x12>
 c44:	12 c0       	rjmp	.+36     	; 0xc6a <__fixunssfsi+0x46>
 c46:	b1 30       	cpi	r27, 0x01	; 1
 c48:	81 f0       	breq	.+32     	; 0xc6a <__fixunssfsi+0x46>
 c4a:	9f d0       	rcall	.+318    	; 0xd8a <__fp_zero>
 c4c:	b1 e0       	ldi	r27, 0x01	; 1
 c4e:	08 95       	ret
 c50:	9c c0       	rjmp	.+312    	; 0xd8a <__fp_zero>
 c52:	67 2f       	mov	r22, r23
 c54:	78 2f       	mov	r23, r24
 c56:	88 27       	eor	r24, r24
 c58:	b8 5f       	subi	r27, 0xF8	; 248
 c5a:	39 f0       	breq	.+14     	; 0xc6a <__fixunssfsi+0x46>
 c5c:	b9 3f       	cpi	r27, 0xF9	; 249
 c5e:	cc f3       	brlt	.-14     	; 0xc52 <__fixunssfsi+0x2e>
 c60:	86 95       	lsr	r24
 c62:	77 95       	ror	r23
 c64:	67 95       	ror	r22
 c66:	b3 95       	inc	r27
 c68:	d9 f7       	brne	.-10     	; 0xc60 <__fixunssfsi+0x3c>
 c6a:	3e f4       	brtc	.+14     	; 0xc7a <__fixunssfsi+0x56>
 c6c:	90 95       	com	r25
 c6e:	80 95       	com	r24
 c70:	70 95       	com	r23
 c72:	61 95       	neg	r22
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__floatunsisf>:
 c7c:	e8 94       	clt
 c7e:	09 c0       	rjmp	.+18     	; 0xc92 <__floatsisf+0x12>

00000c80 <__floatsisf>:
 c80:	97 fb       	bst	r25, 7
 c82:	3e f4       	brtc	.+14     	; 0xc92 <__floatsisf+0x12>
 c84:	90 95       	com	r25
 c86:	80 95       	com	r24
 c88:	70 95       	com	r23
 c8a:	61 95       	neg	r22
 c8c:	7f 4f       	sbci	r23, 0xFF	; 255
 c8e:	8f 4f       	sbci	r24, 0xFF	; 255
 c90:	9f 4f       	sbci	r25, 0xFF	; 255
 c92:	99 23       	and	r25, r25
 c94:	a9 f0       	breq	.+42     	; 0xcc0 <__floatsisf+0x40>
 c96:	f9 2f       	mov	r31, r25
 c98:	96 e9       	ldi	r25, 0x96	; 150
 c9a:	bb 27       	eor	r27, r27
 c9c:	93 95       	inc	r25
 c9e:	f6 95       	lsr	r31
 ca0:	87 95       	ror	r24
 ca2:	77 95       	ror	r23
 ca4:	67 95       	ror	r22
 ca6:	b7 95       	ror	r27
 ca8:	f1 11       	cpse	r31, r1
 caa:	f8 cf       	rjmp	.-16     	; 0xc9c <__floatsisf+0x1c>
 cac:	fa f4       	brpl	.+62     	; 0xcec <__floatsisf+0x6c>
 cae:	bb 0f       	add	r27, r27
 cb0:	11 f4       	brne	.+4      	; 0xcb6 <__floatsisf+0x36>
 cb2:	60 ff       	sbrs	r22, 0
 cb4:	1b c0       	rjmp	.+54     	; 0xcec <__floatsisf+0x6c>
 cb6:	6f 5f       	subi	r22, 0xFF	; 255
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	16 c0       	rjmp	.+44     	; 0xcec <__floatsisf+0x6c>
 cc0:	88 23       	and	r24, r24
 cc2:	11 f0       	breq	.+4      	; 0xcc8 <__floatsisf+0x48>
 cc4:	96 e9       	ldi	r25, 0x96	; 150
 cc6:	11 c0       	rjmp	.+34     	; 0xcea <__floatsisf+0x6a>
 cc8:	77 23       	and	r23, r23
 cca:	21 f0       	breq	.+8      	; 0xcd4 <__floatsisf+0x54>
 ccc:	9e e8       	ldi	r25, 0x8E	; 142
 cce:	87 2f       	mov	r24, r23
 cd0:	76 2f       	mov	r23, r22
 cd2:	05 c0       	rjmp	.+10     	; 0xcde <__floatsisf+0x5e>
 cd4:	66 23       	and	r22, r22
 cd6:	71 f0       	breq	.+28     	; 0xcf4 <__floatsisf+0x74>
 cd8:	96 e8       	ldi	r25, 0x86	; 134
 cda:	86 2f       	mov	r24, r22
 cdc:	70 e0       	ldi	r23, 0x00	; 0
 cde:	60 e0       	ldi	r22, 0x00	; 0
 ce0:	2a f0       	brmi	.+10     	; 0xcec <__floatsisf+0x6c>
 ce2:	9a 95       	dec	r25
 ce4:	66 0f       	add	r22, r22
 ce6:	77 1f       	adc	r23, r23
 ce8:	88 1f       	adc	r24, r24
 cea:	da f7       	brpl	.-10     	; 0xce2 <__floatsisf+0x62>
 cec:	88 0f       	add	r24, r24
 cee:	96 95       	lsr	r25
 cf0:	87 95       	ror	r24
 cf2:	97 f9       	bld	r25, 7
 cf4:	08 95       	ret

00000cf6 <__fp_inf>:
 cf6:	97 f9       	bld	r25, 7
 cf8:	9f 67       	ori	r25, 0x7F	; 127
 cfa:	80 e8       	ldi	r24, 0x80	; 128
 cfc:	70 e0       	ldi	r23, 0x00	; 0
 cfe:	60 e0       	ldi	r22, 0x00	; 0
 d00:	08 95       	ret

00000d02 <__fp_nan>:
 d02:	9f ef       	ldi	r25, 0xFF	; 255
 d04:	80 ec       	ldi	r24, 0xC0	; 192
 d06:	08 95       	ret

00000d08 <__fp_pscA>:
 d08:	00 24       	eor	r0, r0
 d0a:	0a 94       	dec	r0
 d0c:	16 16       	cp	r1, r22
 d0e:	17 06       	cpc	r1, r23
 d10:	18 06       	cpc	r1, r24
 d12:	09 06       	cpc	r0, r25
 d14:	08 95       	ret

00000d16 <__fp_pscB>:
 d16:	00 24       	eor	r0, r0
 d18:	0a 94       	dec	r0
 d1a:	12 16       	cp	r1, r18
 d1c:	13 06       	cpc	r1, r19
 d1e:	14 06       	cpc	r1, r20
 d20:	05 06       	cpc	r0, r21
 d22:	08 95       	ret

00000d24 <__fp_round>:
 d24:	09 2e       	mov	r0, r25
 d26:	03 94       	inc	r0
 d28:	00 0c       	add	r0, r0
 d2a:	11 f4       	brne	.+4      	; 0xd30 <__fp_round+0xc>
 d2c:	88 23       	and	r24, r24
 d2e:	52 f0       	brmi	.+20     	; 0xd44 <__fp_round+0x20>
 d30:	bb 0f       	add	r27, r27
 d32:	40 f4       	brcc	.+16     	; 0xd44 <__fp_round+0x20>
 d34:	bf 2b       	or	r27, r31
 d36:	11 f4       	brne	.+4      	; 0xd3c <__fp_round+0x18>
 d38:	60 ff       	sbrs	r22, 0
 d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__fp_round+0x20>
 d3c:	6f 5f       	subi	r22, 0xFF	; 255
 d3e:	7f 4f       	sbci	r23, 0xFF	; 255
 d40:	8f 4f       	sbci	r24, 0xFF	; 255
 d42:	9f 4f       	sbci	r25, 0xFF	; 255
 d44:	08 95       	ret

00000d46 <__fp_split3>:
 d46:	57 fd       	sbrc	r21, 7
 d48:	90 58       	subi	r25, 0x80	; 128
 d4a:	44 0f       	add	r20, r20
 d4c:	55 1f       	adc	r21, r21
 d4e:	59 f0       	breq	.+22     	; 0xd66 <__fp_splitA+0x10>
 d50:	5f 3f       	cpi	r21, 0xFF	; 255
 d52:	71 f0       	breq	.+28     	; 0xd70 <__fp_splitA+0x1a>
 d54:	47 95       	ror	r20

00000d56 <__fp_splitA>:
 d56:	88 0f       	add	r24, r24
 d58:	97 fb       	bst	r25, 7
 d5a:	99 1f       	adc	r25, r25
 d5c:	61 f0       	breq	.+24     	; 0xd76 <__fp_splitA+0x20>
 d5e:	9f 3f       	cpi	r25, 0xFF	; 255
 d60:	79 f0       	breq	.+30     	; 0xd80 <__fp_splitA+0x2a>
 d62:	87 95       	ror	r24
 d64:	08 95       	ret
 d66:	12 16       	cp	r1, r18
 d68:	13 06       	cpc	r1, r19
 d6a:	14 06       	cpc	r1, r20
 d6c:	55 1f       	adc	r21, r21
 d6e:	f2 cf       	rjmp	.-28     	; 0xd54 <__fp_split3+0xe>
 d70:	46 95       	lsr	r20
 d72:	f1 df       	rcall	.-30     	; 0xd56 <__fp_splitA>
 d74:	08 c0       	rjmp	.+16     	; 0xd86 <__fp_splitA+0x30>
 d76:	16 16       	cp	r1, r22
 d78:	17 06       	cpc	r1, r23
 d7a:	18 06       	cpc	r1, r24
 d7c:	99 1f       	adc	r25, r25
 d7e:	f1 cf       	rjmp	.-30     	; 0xd62 <__fp_splitA+0xc>
 d80:	86 95       	lsr	r24
 d82:	71 05       	cpc	r23, r1
 d84:	61 05       	cpc	r22, r1
 d86:	08 94       	sec
 d88:	08 95       	ret

00000d8a <__fp_zero>:
 d8a:	e8 94       	clt

00000d8c <__fp_szero>:
 d8c:	bb 27       	eor	r27, r27
 d8e:	66 27       	eor	r22, r22
 d90:	77 27       	eor	r23, r23
 d92:	cb 01       	movw	r24, r22
 d94:	97 f9       	bld	r25, 7
 d96:	08 95       	ret

00000d98 <__mulsf3>:
 d98:	0b d0       	rcall	.+22     	; 0xdb0 <__mulsf3x>
 d9a:	c4 cf       	rjmp	.-120    	; 0xd24 <__fp_round>
 d9c:	b5 df       	rcall	.-150    	; 0xd08 <__fp_pscA>
 d9e:	28 f0       	brcs	.+10     	; 0xdaa <__mulsf3+0x12>
 da0:	ba df       	rcall	.-140    	; 0xd16 <__fp_pscB>
 da2:	18 f0       	brcs	.+6      	; 0xdaa <__mulsf3+0x12>
 da4:	95 23       	and	r25, r21
 da6:	09 f0       	breq	.+2      	; 0xdaa <__mulsf3+0x12>
 da8:	a6 cf       	rjmp	.-180    	; 0xcf6 <__fp_inf>
 daa:	ab cf       	rjmp	.-170    	; 0xd02 <__fp_nan>
 dac:	11 24       	eor	r1, r1
 dae:	ee cf       	rjmp	.-36     	; 0xd8c <__fp_szero>

00000db0 <__mulsf3x>:
 db0:	ca df       	rcall	.-108    	; 0xd46 <__fp_split3>
 db2:	a0 f3       	brcs	.-24     	; 0xd9c <__mulsf3+0x4>

00000db4 <__mulsf3_pse>:
 db4:	95 9f       	mul	r25, r21
 db6:	d1 f3       	breq	.-12     	; 0xdac <__mulsf3+0x14>
 db8:	95 0f       	add	r25, r21
 dba:	50 e0       	ldi	r21, 0x00	; 0
 dbc:	55 1f       	adc	r21, r21
 dbe:	62 9f       	mul	r22, r18
 dc0:	f0 01       	movw	r30, r0
 dc2:	72 9f       	mul	r23, r18
 dc4:	bb 27       	eor	r27, r27
 dc6:	f0 0d       	add	r31, r0
 dc8:	b1 1d       	adc	r27, r1
 dca:	63 9f       	mul	r22, r19
 dcc:	aa 27       	eor	r26, r26
 dce:	f0 0d       	add	r31, r0
 dd0:	b1 1d       	adc	r27, r1
 dd2:	aa 1f       	adc	r26, r26
 dd4:	64 9f       	mul	r22, r20
 dd6:	66 27       	eor	r22, r22
 dd8:	b0 0d       	add	r27, r0
 dda:	a1 1d       	adc	r26, r1
 ddc:	66 1f       	adc	r22, r22
 dde:	82 9f       	mul	r24, r18
 de0:	22 27       	eor	r18, r18
 de2:	b0 0d       	add	r27, r0
 de4:	a1 1d       	adc	r26, r1
 de6:	62 1f       	adc	r22, r18
 de8:	73 9f       	mul	r23, r19
 dea:	b0 0d       	add	r27, r0
 dec:	a1 1d       	adc	r26, r1
 dee:	62 1f       	adc	r22, r18
 df0:	83 9f       	mul	r24, r19
 df2:	a0 0d       	add	r26, r0
 df4:	61 1d       	adc	r22, r1
 df6:	22 1f       	adc	r18, r18
 df8:	74 9f       	mul	r23, r20
 dfa:	33 27       	eor	r19, r19
 dfc:	a0 0d       	add	r26, r0
 dfe:	61 1d       	adc	r22, r1
 e00:	23 1f       	adc	r18, r19
 e02:	84 9f       	mul	r24, r20
 e04:	60 0d       	add	r22, r0
 e06:	21 1d       	adc	r18, r1
 e08:	82 2f       	mov	r24, r18
 e0a:	76 2f       	mov	r23, r22
 e0c:	6a 2f       	mov	r22, r26
 e0e:	11 24       	eor	r1, r1
 e10:	9f 57       	subi	r25, 0x7F	; 127
 e12:	50 40       	sbci	r21, 0x00	; 0
 e14:	8a f0       	brmi	.+34     	; 0xe38 <__mulsf3_pse+0x84>
 e16:	e1 f0       	breq	.+56     	; 0xe50 <__mulsf3_pse+0x9c>
 e18:	88 23       	and	r24, r24
 e1a:	4a f0       	brmi	.+18     	; 0xe2e <__mulsf3_pse+0x7a>
 e1c:	ee 0f       	add	r30, r30
 e1e:	ff 1f       	adc	r31, r31
 e20:	bb 1f       	adc	r27, r27
 e22:	66 1f       	adc	r22, r22
 e24:	77 1f       	adc	r23, r23
 e26:	88 1f       	adc	r24, r24
 e28:	91 50       	subi	r25, 0x01	; 1
 e2a:	50 40       	sbci	r21, 0x00	; 0
 e2c:	a9 f7       	brne	.-22     	; 0xe18 <__mulsf3_pse+0x64>
 e2e:	9e 3f       	cpi	r25, 0xFE	; 254
 e30:	51 05       	cpc	r21, r1
 e32:	70 f0       	brcs	.+28     	; 0xe50 <__mulsf3_pse+0x9c>
 e34:	60 cf       	rjmp	.-320    	; 0xcf6 <__fp_inf>
 e36:	aa cf       	rjmp	.-172    	; 0xd8c <__fp_szero>
 e38:	5f 3f       	cpi	r21, 0xFF	; 255
 e3a:	ec f3       	brlt	.-6      	; 0xe36 <__mulsf3_pse+0x82>
 e3c:	98 3e       	cpi	r25, 0xE8	; 232
 e3e:	dc f3       	brlt	.-10     	; 0xe36 <__mulsf3_pse+0x82>
 e40:	86 95       	lsr	r24
 e42:	77 95       	ror	r23
 e44:	67 95       	ror	r22
 e46:	b7 95       	ror	r27
 e48:	f7 95       	ror	r31
 e4a:	e7 95       	ror	r30
 e4c:	9f 5f       	subi	r25, 0xFF	; 255
 e4e:	c1 f7       	brne	.-16     	; 0xe40 <__mulsf3_pse+0x8c>
 e50:	fe 2b       	or	r31, r30
 e52:	88 0f       	add	r24, r24
 e54:	91 1d       	adc	r25, r1
 e56:	96 95       	lsr	r25
 e58:	87 95       	ror	r24
 e5a:	97 f9       	bld	r25, 7
 e5c:	08 95       	ret

00000e5e <__udivmodsi4>:
 e5e:	a1 e2       	ldi	r26, 0x21	; 33
 e60:	1a 2e       	mov	r1, r26
 e62:	aa 1b       	sub	r26, r26
 e64:	bb 1b       	sub	r27, r27
 e66:	fd 01       	movw	r30, r26
 e68:	0d c0       	rjmp	.+26     	; 0xe84 <__udivmodsi4_ep>

00000e6a <__udivmodsi4_loop>:
 e6a:	aa 1f       	adc	r26, r26
 e6c:	bb 1f       	adc	r27, r27
 e6e:	ee 1f       	adc	r30, r30
 e70:	ff 1f       	adc	r31, r31
 e72:	a2 17       	cp	r26, r18
 e74:	b3 07       	cpc	r27, r19
 e76:	e4 07       	cpc	r30, r20
 e78:	f5 07       	cpc	r31, r21
 e7a:	20 f0       	brcs	.+8      	; 0xe84 <__udivmodsi4_ep>
 e7c:	a2 1b       	sub	r26, r18
 e7e:	b3 0b       	sbc	r27, r19
 e80:	e4 0b       	sbc	r30, r20
 e82:	f5 0b       	sbc	r31, r21

00000e84 <__udivmodsi4_ep>:
 e84:	66 1f       	adc	r22, r22
 e86:	77 1f       	adc	r23, r23
 e88:	88 1f       	adc	r24, r24
 e8a:	99 1f       	adc	r25, r25
 e8c:	1a 94       	dec	r1
 e8e:	69 f7       	brne	.-38     	; 0xe6a <__udivmodsi4_loop>
 e90:	60 95       	com	r22
 e92:	70 95       	com	r23
 e94:	80 95       	com	r24
 e96:	90 95       	com	r25
 e98:	9b 01       	movw	r18, r22
 e9a:	ac 01       	movw	r20, r24
 e9c:	bd 01       	movw	r22, r26
 e9e:	cf 01       	movw	r24, r30
 ea0:	08 95       	ret

00000ea2 <__tablejump2__>:
 ea2:	ee 0f       	add	r30, r30
 ea4:	ff 1f       	adc	r31, r31
 ea6:	00 24       	eor	r0, r0
 ea8:	00 1c       	adc	r0, r0
 eaa:	0b be       	out	0x3b, r0	; 59
 eac:	07 90       	elpm	r0, Z+
 eae:	f6 91       	elpm	r31, Z
 eb0:	e0 2d       	mov	r30, r0
 eb2:	09 94       	ijmp

00000eb4 <_exit>:
 eb4:	f8 94       	cli

00000eb6 <__stop_program>:
 eb6:	ff cf       	rjmp	.-2      	; 0xeb6 <__stop_program>
